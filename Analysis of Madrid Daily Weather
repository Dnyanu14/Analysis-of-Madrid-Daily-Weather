Project Report: Analysis of Madrid Daily Weather (1997-2015)
1. Introduction
This report presents an analysis of daily weather data for Madrid spanning from 1997 to 2015. The dataset includes key variables such as temperatures, dew point, humidity, visibility, wind speed, precipitation events, cloud cover, and wind direction. The aim of this project is to understand weather patterns, identify optimal travel times, and compare visibility conditions under various weather scenarios.

2. Data Description
2.1 Data Variables
Date: The specific date of the recorded weather data.
TemperatureMax: Maximum temperature recorded for the day.
TemperatureMin: Minimum temperature recorded for the day.
TemperatureMean: Mean temperature for the day.
DewPoint: Dew point for the day.
Humidity: Relative humidity percentage.
Visibility: Visibility distance in kilometers.
WindSpeed: Wind speed in kilometers per hour.
Precipitation: Amount of precipitation in millimeters.
CloudCover: Percentage of cloud cover.
WindDirection: Wind direction in degrees.

3. Methodology
3.1 Data Loading and Preparation


{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "61eadd5d-ef37-40eb-9660-ddccd3c42f96",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: pandas in c:\\users\\admin\\anaconda3\\lib\\site-packages (2.2.2)\n",
      "Requirement already satisfied: numpy>=1.26.0 in c:\\users\\admin\\anaconda3\\lib\\site-packages (from pandas) (1.26.4)\n",
      "Requirement already satisfied: python-dateutil>=2.8.2 in c:\\users\\admin\\anaconda3\\lib\\site-packages (from pandas) (2.9.0.post0)\n",
      "Requirement already satisfied: pytz>=2020.1 in c:\\users\\admin\\anaconda3\\lib\\site-packages (from pandas) (2024.1)\n",
      "Requirement already satisfied: tzdata>=2022.7 in c:\\users\\admin\\anaconda3\\lib\\site-packages (from pandas) (2023.3)\n",
      "Requirement already satisfied: six>=1.5 in c:\\users\\admin\\anaconda3\\lib\\site-packages (from python-dateutil>=2.8.2->pandas) (1.16.0)\n",
      "Note: you may need to restart the kernel to use updated packages.\n"
     ]
    }
   ],
   "source": [
    "pip install pandas\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "27cea2e6-0dc5-4b3b-9e82-0c0f0fb17f41",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "\n",
    "# Load the CSV file\n",
    "file_path = 'Madrid Daily Weather 1997-2015.csv'\n",
    "df = pd.read_csv(file_path)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "072e5454-d57d-41d2-8bb6-e74bbb113550",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "          CET  Max TemperatureC  Mean TemperatureC  Min TemperatureC  \\\n",
      "0  1997-01-01               7.0                4.0               2.0   \n",
      "1  1997-01-02               7.0                3.0               0.0   \n",
      "2  1997-01-03               5.0                3.0               2.0   \n",
      "3  1997-01-04               7.0                3.0              -1.0   \n",
      "4  1997-01-05               2.0                0.0              -1.0   \n",
      "\n",
      "   Dew PointC  MeanDew PointC  Min DewpointC  Max Humidity   Mean Humidity  \\\n",
      "0         5.0             3.0            2.0         100.0            95.0   \n",
      "1         6.0             3.0            0.0         100.0            92.0   \n",
      "2         5.0             1.0           -1.0         100.0            85.0   \n",
      "3        -2.0            -3.0           -4.0          86.0            63.0   \n",
      "4         2.0             0.0           -3.0         100.0            95.0   \n",
      "\n",
      "    Min Humidity  ...   Max VisibilityKm   Mean VisibilityKm  \\\n",
      "0           76.0  ...               10.0                 9.0   \n",
      "1           71.0  ...               10.0                 9.0   \n",
      "2           70.0  ...               10.0                10.0   \n",
      "3           49.0  ...               10.0                10.0   \n",
      "4           86.0  ...               10.0                 5.0   \n",
      "\n",
      "    Min VisibilitykM   Max Wind SpeedKm/h   Mean Wind SpeedKm/h  \\\n",
      "0                4.0                   13                     6   \n",
      "1                4.0                   26                     8   \n",
      "2                7.0                   27                    19   \n",
      "3               10.0                   27                    19   \n",
      "4                1.0                   14                     6   \n",
      "\n",
      "    Max Gust SpeedKm/h  Precipitationmm   CloudCover     Events  \\\n",
      "0                  NaN              0.0          6.0        NaN   \n",
      "1                 47.0              0.0          5.0       Rain   \n",
      "2                  NaN              0.0          6.0  Rain-Snow   \n",
      "3                 40.0              0.0          2.0        NaN   \n",
      "4                  NaN              0.0          7.0       Snow   \n",
      "\n",
      "   WindDirDegrees  \n",
      "0             229  \n",
      "1             143  \n",
      "2             256  \n",
      "3             284  \n",
      "4               2  \n",
      "\n",
      "[5 rows x 23 columns]\n",
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 6812 entries, 0 to 6811\n",
      "Data columns (total 23 columns):\n",
      " #   Column                       Non-Null Count  Dtype  \n",
      "---  ------                       --------------  -----  \n",
      " 0   CET                          6812 non-null   object \n",
      " 1   Max TemperatureC             6810 non-null   float64\n",
      " 2   Mean TemperatureC            6809 non-null   float64\n",
      " 3   Min TemperatureC             6810 non-null   float64\n",
      " 4   Dew PointC                   6810 non-null   float64\n",
      " 5   MeanDew PointC               6810 non-null   float64\n",
      " 6   Min DewpointC                6810 non-null   float64\n",
      " 7   Max Humidity                 6810 non-null   float64\n",
      " 8    Mean Humidity               6810 non-null   float64\n",
      " 9    Min Humidity                6810 non-null   float64\n",
      " 10   Max Sea Level PressurehPa   6812 non-null   int64  \n",
      " 11   Mean Sea Level PressurehPa  6812 non-null   int64  \n",
      " 12   Min Sea Level PressurehPa   6812 non-null   int64  \n",
      " 13   Max VisibilityKm            5872 non-null   float64\n",
      " 14   Mean VisibilityKm           5872 non-null   float64\n",
      " 15   Min VisibilitykM            5872 non-null   float64\n",
      " 16   Max Wind SpeedKm/h          6812 non-null   int64  \n",
      " 17   Mean Wind SpeedKm/h         6812 non-null   int64  \n",
      " 18   Max Gust SpeedKm/h          3506 non-null   float64\n",
      " 19  Precipitationmm              6812 non-null   float64\n",
      " 20   CloudCover                  5440 non-null   float64\n",
      " 21   Events                      1798 non-null   object \n",
      " 22  WindDirDegrees               6812 non-null   int64  \n",
      "dtypes: float64(15), int64(6), object(2)\n",
      "memory usage: 1.2+ MB\n",
      "None\n",
      "       Max TemperatureC  Mean TemperatureC  Min TemperatureC   Dew PointC  \\\n",
      "count       6810.000000        6809.000000       6810.000000  6810.000000   \n",
      "mean          21.039648          14.658687          8.640529     8.120705   \n",
      "std            8.867187           7.580461          6.837626     4.741067   \n",
      "min            0.000000          -3.000000        -10.000000   -12.000000   \n",
      "25%           13.000000           8.000000          3.000000     5.000000   \n",
      "50%           20.000000          14.000000          9.000000     8.000000   \n",
      "75%           29.000000          21.000000         14.000000    12.000000   \n",
      "max           41.000000          32.000000         28.000000    20.000000   \n",
      "\n",
      "       MeanDew PointC  Min DewpointC  Max Humidity   Mean Humidity  \\\n",
      "count     6810.000000    6810.000000   6810.000000     6810.000000   \n",
      "mean         4.976211       1.451248     81.139354       57.971366   \n",
      "std          4.654270       4.909705     17.531839       19.675744   \n",
      "min        -15.000000     -22.000000     16.000000       15.000000   \n",
      "25%          2.000000      -2.000000     68.000000       41.000000   \n",
      "50%          6.000000       2.000000     87.000000       59.000000   \n",
      "75%          8.000000       5.000000     94.000000       74.000000   \n",
      "max         16.000000      14.000000    100.000000      100.000000   \n",
      "\n",
      "        Min Humidity   Max Sea Level PressurehPa  ...  \\\n",
      "count    6810.000000                 6812.000000  ...   \n",
      "mean       34.729369                 1020.529360  ...   \n",
      "std        19.320359                    6.235941  ...   \n",
      "min         4.000000                  994.000000  ...   \n",
      "25%        19.000000                 1017.000000  ...   \n",
      "50%        32.000000                 1020.000000  ...   \n",
      "75%        47.750000                 1024.000000  ...   \n",
      "max       100.000000                 1047.000000  ...   \n",
      "\n",
      "        Min Sea Level PressurehPa   Max VisibilityKm   Mean VisibilityKm  \\\n",
      "count                 6812.000000        5872.000000         5872.000000   \n",
      "mean                  1015.217410          14.644074           11.719857   \n",
      "std                      6.944745           8.770024            5.592324   \n",
      "min                    965.000000           1.000000            0.000000   \n",
      "25%                   1011.000000          10.000000           10.000000   \n",
      "50%                   1015.000000          10.000000           10.000000   \n",
      "75%                   1019.000000          10.000000           10.000000   \n",
      "max                   1041.000000          31.000000           31.000000   \n",
      "\n",
      "        Min VisibilitykM   Max Wind SpeedKm/h   Mean Wind SpeedKm/h  \\\n",
      "count        5872.000000          6812.000000           6812.000000   \n",
      "mean            9.134877            21.953171              9.170728   \n",
      "std             5.075065             9.903914              5.110013   \n",
      "min             0.000000             0.000000              0.000000   \n",
      "25%             7.000000            14.000000              6.000000   \n",
      "50%            10.000000            21.000000              8.000000   \n",
      "75%            10.000000            27.000000             11.000000   \n",
      "max            31.000000           182.000000             39.000000   \n",
      "\n",
      "        Max Gust SpeedKm/h  Precipitationmm   CloudCover  WindDirDegrees  \n",
      "count          3506.000000      6812.000000  5440.000000     6812.000000  \n",
      "mean             43.988306         0.111182     3.206066      197.234586  \n",
      "std              12.252462         0.967174     1.808948      119.872777  \n",
      "min              19.000000         0.000000     0.000000       -1.000000  \n",
      "25%              35.000000         0.000000     2.000000       66.000000  \n",
      "50%              42.000000         0.000000     3.000000      223.000000  \n",
      "75%              52.000000         0.000000     5.000000      299.000000  \n",
      "max             103.000000        32.000000     8.000000      360.000000  \n",
      "\n",
      "[8 rows x 21 columns]\n"
     ]
    }
   ],
   "source": [
    "# Display the first few rows of the dataframe\n",
    "print(df.head())\n",
    "\n",
    "# Display the summary of the dataframe\n",
    "print(df.info())\n",
    "\n",
    "# Display statistical summary of the dataframe\n",
    "print(df.describe())\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "e8d0f34b-aa8c-4839-a701-88085668b5d3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CET                               0\n",
      "Max TemperatureC                  2\n",
      "Mean TemperatureC                 3\n",
      "Min TemperatureC                  2\n",
      "Dew PointC                        2\n",
      "MeanDew PointC                    2\n",
      "Min DewpointC                     2\n",
      "Max Humidity                      2\n",
      " Mean Humidity                    2\n",
      " Min Humidity                     2\n",
      " Max Sea Level PressurehPa        0\n",
      " Mean Sea Level PressurehPa       0\n",
      " Min Sea Level PressurehPa        0\n",
      " Max VisibilityKm               940\n",
      " Mean VisibilityKm              940\n",
      " Min VisibilitykM               940\n",
      " Max Wind SpeedKm/h               0\n",
      " Mean Wind SpeedKm/h              0\n",
      " Max Gust SpeedKm/h            3306\n",
      "Precipitationmm                   0\n",
      " CloudCover                    1372\n",
      " Events                        5014\n",
      "WindDirDegrees                    0\n",
      "dtype: int64\n"
     ]
    }
   ],
   "source": [
    "# Check for missing values\n",
    "print(df.isnull().sum())\n",
    "\n",
    "# Handle missing values if any\n",
    "df = df.dropna()  # This will drop any rows with missing values\n",
    "# or you can fill missing values with a specific value or method\n",
    "# df = df.fillna(method='ffill')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "64222777-98f9-437d-8f29-af556f6d1aec",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "          CET  Max TemperatureC  Mean TemperatureC  Min TemperatureC  \\\n",
      "0  1997-01-01               7.0                4.0               2.0   \n",
      "1  1997-01-02               7.0                3.0               0.0   \n",
      "2  1997-01-03               5.0                3.0               2.0   \n",
      "3  1997-01-04               7.0                3.0              -1.0   \n",
      "4  1997-01-05               2.0                0.0              -1.0   \n",
      "\n",
      "   Dew PointC  MeanDew PointC  Min DewpointC  Max Humidity   Mean Humidity  \\\n",
      "0         5.0             3.0            2.0         100.0            95.0   \n",
      "1         6.0             3.0            0.0         100.0            92.0   \n",
      "2         5.0             1.0           -1.0         100.0            85.0   \n",
      "3        -2.0            -3.0           -4.0          86.0            63.0   \n",
      "4         2.0             0.0           -3.0         100.0            95.0   \n",
      "\n",
      "    Min Humidity  ...   Max VisibilityKm   Mean VisibilityKm  \\\n",
      "0           76.0  ...               10.0                 9.0   \n",
      "1           71.0  ...               10.0                 9.0   \n",
      "2           70.0  ...               10.0                10.0   \n",
      "3           49.0  ...               10.0                10.0   \n",
      "4           86.0  ...               10.0                 5.0   \n",
      "\n",
      "    Min VisibilitykM   Max Wind SpeedKm/h   Mean Wind SpeedKm/h  \\\n",
      "0                4.0                   13                     6   \n",
      "1                4.0                   26                     8   \n",
      "2                7.0                   27                    19   \n",
      "3               10.0                   27                    19   \n",
      "4                1.0                   14                     6   \n",
      "\n",
      "    Max Gust SpeedKm/h  Precipitationmm   CloudCover     Events  \\\n",
      "0                  NaN              0.0          6.0        NaN   \n",
      "1                 47.0              0.0          5.0       Rain   \n",
      "2                  NaN              0.0          6.0  Rain-Snow   \n",
      "3                 40.0              0.0          2.0        NaN   \n",
      "4                  NaN              0.0          7.0       Snow   \n",
      "\n",
      "   WindDirDegrees  \n",
      "0             229  \n",
      "1             143  \n",
      "2             256  \n",
      "3             284  \n",
      "4               2  \n",
      "\n",
      "[5 rows x 23 columns]\n",
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 6812 entries, 0 to 6811\n",
      "Data columns (total 23 columns):\n",
      " #   Column                       Non-Null Count  Dtype  \n",
      "---  ------                       --------------  -----  \n",
      " 0   CET                          6812 non-null   object \n",
      " 1   Max TemperatureC             6810 non-null   float64\n",
      " 2   Mean TemperatureC            6809 non-null   float64\n",
      " 3   Min TemperatureC             6810 non-null   float64\n",
      " 4   Dew PointC                   6810 non-null   float64\n",
      " 5   MeanDew PointC               6810 non-null   float64\n",
      " 6   Min DewpointC                6810 non-null   float64\n",
      " 7   Max Humidity                 6810 non-null   float64\n",
      " 8    Mean Humidity               6810 non-null   float64\n",
      " 9    Min Humidity                6810 non-null   float64\n",
      " 10   Max Sea Level PressurehPa   6812 non-null   int64  \n",
      " 11   Mean Sea Level PressurehPa  6812 non-null   int64  \n",
      " 12   Min Sea Level PressurehPa   6812 non-null   int64  \n",
      " 13   Max VisibilityKm            5872 non-null   float64\n",
      " 14   Mean VisibilityKm           5872 non-null   float64\n",
      " 15   Min VisibilitykM            5872 non-null   float64\n",
      " 16   Max Wind SpeedKm/h          6812 non-null   int64  \n",
      " 17   Mean Wind SpeedKm/h         6812 non-null   int64  \n",
      " 18   Max Gust SpeedKm/h          3506 non-null   float64\n",
      " 19  Precipitationmm              6812 non-null   float64\n",
      " 20   CloudCover                  5440 non-null   float64\n",
      " 21   Events                      1798 non-null   object \n",
      " 22  WindDirDegrees               6812 non-null   int64  \n",
      "dtypes: float64(15), int64(6), object(2)\n",
      "memory usage: 1.2+ MB\n",
      "None\n",
      "       Max TemperatureC  Mean TemperatureC  Min TemperatureC   Dew PointC  \\\n",
      "count       6810.000000        6809.000000       6810.000000  6810.000000   \n",
      "mean          21.039648          14.658687          8.640529     8.120705   \n",
      "std            8.867187           7.580461          6.837626     4.741067   \n",
      "min            0.000000          -3.000000        -10.000000   -12.000000   \n",
      "25%           13.000000           8.000000          3.000000     5.000000   \n",
      "50%           20.000000          14.000000          9.000000     8.000000   \n",
      "75%           29.000000          21.000000         14.000000    12.000000   \n",
      "max           41.000000          32.000000         28.000000    20.000000   \n",
      "\n",
      "       MeanDew PointC  Min DewpointC  Max Humidity   Mean Humidity  \\\n",
      "count     6810.000000    6810.000000   6810.000000     6810.000000   \n",
      "mean         4.976211       1.451248     81.139354       57.971366   \n",
      "std          4.654270       4.909705     17.531839       19.675744   \n",
      "min        -15.000000     -22.000000     16.000000       15.000000   \n",
      "25%          2.000000      -2.000000     68.000000       41.000000   \n",
      "50%          6.000000       2.000000     87.000000       59.000000   \n",
      "75%          8.000000       5.000000     94.000000       74.000000   \n",
      "max         16.000000      14.000000    100.000000      100.000000   \n",
      "\n",
      "        Min Humidity   Max Sea Level PressurehPa  ...  \\\n",
      "count    6810.000000                 6812.000000  ...   \n",
      "mean       34.729369                 1020.529360  ...   \n",
      "std        19.320359                    6.235941  ...   \n",
      "min         4.000000                  994.000000  ...   \n",
      "25%        19.000000                 1017.000000  ...   \n",
      "50%        32.000000                 1020.000000  ...   \n",
      "75%        47.750000                 1024.000000  ...   \n",
      "max       100.000000                 1047.000000  ...   \n",
      "\n",
      "        Min Sea Level PressurehPa   Max VisibilityKm   Mean VisibilityKm  \\\n",
      "count                 6812.000000        5872.000000         5872.000000   \n",
      "mean                  1015.217410          14.644074           11.719857   \n",
      "std                      6.944745           8.770024            5.592324   \n",
      "min                    965.000000           1.000000            0.000000   \n",
      "25%                   1011.000000          10.000000           10.000000   \n",
      "50%                   1015.000000          10.000000           10.000000   \n",
      "75%                   1019.000000          10.000000           10.000000   \n",
      "max                   1041.000000          31.000000           31.000000   \n",
      "\n",
      "        Min VisibilitykM   Max Wind SpeedKm/h   Mean Wind SpeedKm/h  \\\n",
      "count        5872.000000          6812.000000           6812.000000   \n",
      "mean            9.134877            21.953171              9.170728   \n",
      "std             5.075065             9.903914              5.110013   \n",
      "min             0.000000             0.000000              0.000000   \n",
      "25%             7.000000            14.000000              6.000000   \n",
      "50%            10.000000            21.000000              8.000000   \n",
      "75%            10.000000            27.000000             11.000000   \n",
      "max            31.000000           182.000000             39.000000   \n",
      "\n",
      "        Max Gust SpeedKm/h  Precipitationmm   CloudCover  WindDirDegrees  \n",
      "count          3506.000000      6812.000000  5440.000000     6812.000000  \n",
      "mean             43.988306         0.111182     3.206066      197.234586  \n",
      "std              12.252462         0.967174     1.808948      119.872777  \n",
      "min              19.000000         0.000000     0.000000       -1.000000  \n",
      "25%              35.000000         0.000000     2.000000       66.000000  \n",
      "50%              42.000000         0.000000     3.000000      223.000000  \n",
      "75%              52.000000         0.000000     5.000000      299.000000  \n",
      "max             103.000000        32.000000     8.000000      360.000000  \n",
      "\n",
      "[8 rows x 21 columns]\n"
     ]
    },
    {
     "ename": "KeyError",
     "evalue": "'Precipitation'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\pandas\\core\\indexes\\base.py:3805\u001b[0m, in \u001b[0;36mIndex.get_loc\u001b[1;34m(self, key)\u001b[0m\n\u001b[0;32m   3804\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[1;32m-> 3805\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_engine\u001b[38;5;241m.\u001b[39mget_loc(casted_key)\n\u001b[0;32m   3806\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mKeyError\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m err:\n",
      "File \u001b[1;32mindex.pyx:167\u001b[0m, in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[1;34m()\u001b[0m\n",
      "File \u001b[1;32mindex.pyx:196\u001b[0m, in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[1;34m()\u001b[0m\n",
      "File \u001b[1;32mpandas\\\\_libs\\\\hashtable_class_helper.pxi:7081\u001b[0m, in \u001b[0;36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[1;34m()\u001b[0m\n",
      "File \u001b[1;32mpandas\\\\_libs\\\\hashtable_class_helper.pxi:7089\u001b[0m, in \u001b[0;36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[1;34m()\u001b[0m\n",
      "\u001b[1;31mKeyError\u001b[0m: 'Precipitation'",
      "\nThe above exception was the direct cause of the following exception:\n",
      "\u001b[1;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[29], line 17\u001b[0m\n\u001b[0;32m     14\u001b[0m \u001b[38;5;28mprint\u001b[39m(weather_data\u001b[38;5;241m.\u001b[39mdescribe())\n\u001b[0;32m     16\u001b[0m \u001b[38;5;66;03m# Calculate the number of days with precipitation events\u001b[39;00m\n\u001b[1;32m---> 17\u001b[0m precipitation_days \u001b[38;5;241m=\u001b[39m weather_data[weather_data[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mPrecipitation\u001b[39m\u001b[38;5;124m'\u001b[39m] \u001b[38;5;241m>\u001b[39m \u001b[38;5;241m0\u001b[39m]\u001b[38;5;241m.\u001b[39mshape[\u001b[38;5;241m0\u001b[39m]\n\u001b[0;32m     19\u001b[0m \u001b[38;5;66;03m# Calculate the total number of days\u001b[39;00m\n\u001b[0;32m     20\u001b[0m total_days \u001b[38;5;241m=\u001b[39m weather_data\u001b[38;5;241m.\u001b[39mshape[\u001b[38;5;241m0\u001b[39m]\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\pandas\\core\\frame.py:4102\u001b[0m, in \u001b[0;36mDataFrame.__getitem__\u001b[1;34m(self, key)\u001b[0m\n\u001b[0;32m   4100\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mcolumns\u001b[38;5;241m.\u001b[39mnlevels \u001b[38;5;241m>\u001b[39m \u001b[38;5;241m1\u001b[39m:\n\u001b[0;32m   4101\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_getitem_multilevel(key)\n\u001b[1;32m-> 4102\u001b[0m indexer \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mcolumns\u001b[38;5;241m.\u001b[39mget_loc(key)\n\u001b[0;32m   4103\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m is_integer(indexer):\n\u001b[0;32m   4104\u001b[0m     indexer \u001b[38;5;241m=\u001b[39m [indexer]\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\pandas\\core\\indexes\\base.py:3812\u001b[0m, in \u001b[0;36mIndex.get_loc\u001b[1;34m(self, key)\u001b[0m\n\u001b[0;32m   3807\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(casted_key, \u001b[38;5;28mslice\u001b[39m) \u001b[38;5;129;01mor\u001b[39;00m (\n\u001b[0;32m   3808\u001b[0m         \u001b[38;5;28misinstance\u001b[39m(casted_key, abc\u001b[38;5;241m.\u001b[39mIterable)\n\u001b[0;32m   3809\u001b[0m         \u001b[38;5;129;01mand\u001b[39;00m \u001b[38;5;28many\u001b[39m(\u001b[38;5;28misinstance\u001b[39m(x, \u001b[38;5;28mslice\u001b[39m) \u001b[38;5;28;01mfor\u001b[39;00m x \u001b[38;5;129;01min\u001b[39;00m casted_key)\n\u001b[0;32m   3810\u001b[0m     ):\n\u001b[0;32m   3811\u001b[0m         \u001b[38;5;28;01mraise\u001b[39;00m InvalidIndexError(key)\n\u001b[1;32m-> 3812\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mKeyError\u001b[39;00m(key) \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01merr\u001b[39;00m\n\u001b[0;32m   3813\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mTypeError\u001b[39;00m:\n\u001b[0;32m   3814\u001b[0m     \u001b[38;5;66;03m# If we have a listlike key, _check_indexing_error will raise\u001b[39;00m\n\u001b[0;32m   3815\u001b[0m     \u001b[38;5;66;03m#  InvalidIndexError. Otherwise we fall through and re-raise\u001b[39;00m\n\u001b[0;32m   3816\u001b[0m     \u001b[38;5;66;03m#  the TypeError.\u001b[39;00m\n\u001b[0;32m   3817\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_check_indexing_error(key)\n",
      "\u001b[1;31mKeyError\u001b[0m: 'Precipitation'"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "\n",
    "# Load the CSV file\n",
    "file_path = 'Madrid Daily Weather 1997-2015.csv'\n",
    "weather_data = pd.read_csv(file_path)\n",
    "\n",
    "# Display the first few rows of the DataFrame\n",
    "print(weather_data.head())\n",
    "\n",
    "# Get basic information about the DataFrame\n",
    "print(weather_data.info())\n",
    "\n",
    "# Display summary statistics of the DataFrame\n",
    "print(weather_data.describe())\n",
    "\n",
    "# Calculate the number of days with precipitation events\n",
    "precipitation_days = weather_data[weather_data['Precipitation'] > 0].shape[0]\n",
    "\n",
    "# Calculate the total number of days\n",
    "total_days = weather_data.shape[0]\n",
    "\n",
    "# Calculate the number of clear days (assuming 'Cloud Cover' == 0 means clear days)\n",
    "clear_days = weather_data[weather_data['Cloud Cover'] == 0].shape[0]\n",
    "\n",
    "# Calculate percentages\n",
    "precipitation_percentage = (precipitation_days / total_days) * 100\n",
    "clear_percentage = (clear_days / total_days) * 100\n",
    "\n",
    "print(f\"Percentage of days with precipitation: {precipitation_percentage:.2f}%\")\n",
    "print(f\"Percentage of clear days: {clear_percentage:.2f}%\")\n",
    "\n",
    "# Convert the 'Date' column to datetime format\n",
    "weather_data['Date'] = pd.to_datetime(weather_data['Date'])\n",
    "\n",
    "# Extract the month from the 'Date' column\n",
    "weather_data['Month'] = weather_data['Date'].dt.month\n",
    "\n",
    "# Group by month and calculate the mean maximum temperature\n",
    "monthly_avg_temp = weather_data.groupby('Month')['Max Temperature'].mean()\n",
    "\n",
    "# Find the month with the highest average maximum temperature\n",
    "warmest_month = monthly_avg_temp.idxmax()\n",
    "\n",
    "print(f\"The warmest month to travel to Madrid is: {warmest_month}\")\n",
    "\n",
    "# Assuming 'Wind Speed' column indicates the wind gust speed\n",
    "fastest_wind_date = weather_data.loc[weather_data['Wind Speed'].idxmax()]\n",
    "\n",
    "# Get the weather data on that date\n",
    "print(f\"The fastest wind gust was on: {fastest_wind_date['Date']}\")\n",
    "print(f\"Weather details on the fastest wind gust day: \\n{fastest_wind_date}\")\n",
    "\n",
    "# Define clear and foggy days\n",
    "clear_days = weather_data[weather_data['Cloud Cover'] == 0]\n",
    "foggy_days = weather_data[weather_data['Visibility (Km)'] < 1]\n",
    "\n",
    "# Calculate average visibility for clear and foggy days\n",
    "avg_visibility_clear = clear_days['Visibility (Km)'].mean()\n",
    "avg_visibility_foggy = foggy_days['Visibility (Km)'].mean()\n",
    "\n",
    "print(f\"Average visibility on clear days: {avg_visibility_clear:.2f} Km\")\n",
    "print(f\"Average visibility on foggy days: {avg_visibility_foggy:.2f} Km\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "2264528b-7eeb-48ac-8f01-2652438a90fa",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Column 'Precipitation' not found.\n"
     ]
    }
   ],
   "source": [
    "if 'Precipitation' in weather_data.columns:\n",
    "    precipitation_days = weather_data[weather_data['Precipitation'] > 0].shape[0]\n",
    "else:\n",
    "    print(\"Column 'Precipitation' not found.\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "13d480d0-aa99-4916-996d-d2781734f3ed",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Index(['CET', 'Max TemperatureC', 'Mean TemperatureC', 'Min TemperatureC',\n",
      "       'Dew PointC', 'MeanDew PointC', 'Min DewpointC', 'Max Humidity',\n",
      "       ' Mean Humidity', ' Min Humidity', ' Max Sea Level PressurehPa',\n",
      "       ' Mean Sea Level PressurehPa', ' Min Sea Level PressurehPa',\n",
      "       ' Max VisibilityKm', ' Mean VisibilityKm', ' Min VisibilitykM',\n",
      "       ' Max Wind SpeedKm/h', ' Mean Wind SpeedKm/h', ' Max Gust SpeedKm/h',\n",
      "       'Precipitationmm', ' CloudCover', ' Events', 'WindDirDegrees'],\n",
      "      dtype='object')\n"
     ]
    }
   ],
   "source": [
    "print(weather_data.columns)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "1d954801-a284-46eb-b8fd-e768d48c209e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['CET', 'Max TemperatureC', 'Mean TemperatureC', 'Min TemperatureC', 'Dew PointC', 'MeanDew PointC', 'Min DewpointC', 'Max Humidity', 'Mean Humidity', 'Min Humidity', 'Max Sea Level PressurehPa', 'Mean Sea Level PressurehPa', 'Min Sea Level PressurehPa', 'Max VisibilityKm', 'Mean VisibilityKm', 'Min VisibilitykM', 'Max Wind SpeedKm/h', 'Mean Wind SpeedKm/h', 'Max Gust SpeedKm/h', 'Precipitationmm', 'CloudCover', 'Events', 'WindDirDegrees']\n"
     ]
    }
   ],
   "source": [
    "print([col.strip() for col in weather_data.columns])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "45d0648f-f68a-4146-9500-f49b54238e30",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "          CET  Max TemperatureC  Mean TemperatureC  Min TemperatureC  \\\n",
      "0  1997-01-01               7.0                4.0               2.0   \n",
      "1  1997-01-02               7.0                3.0               0.0   \n",
      "2  1997-01-03               5.0                3.0               2.0   \n",
      "3  1997-01-04               7.0                3.0              -1.0   \n",
      "4  1997-01-05               2.0                0.0              -1.0   \n",
      "\n",
      "   Dew PointC  MeanDew PointC  Min DewpointC  Max Humidity   Mean Humidity  \\\n",
      "0         5.0             3.0            2.0         100.0            95.0   \n",
      "1         6.0             3.0            0.0         100.0            92.0   \n",
      "2         5.0             1.0           -1.0         100.0            85.0   \n",
      "3        -2.0            -3.0           -4.0          86.0            63.0   \n",
      "4         2.0             0.0           -3.0         100.0            95.0   \n",
      "\n",
      "    Min Humidity  ...   Max VisibilityKm   Mean VisibilityKm  \\\n",
      "0           76.0  ...               10.0                 9.0   \n",
      "1           71.0  ...               10.0                 9.0   \n",
      "2           70.0  ...               10.0                10.0   \n",
      "3           49.0  ...               10.0                10.0   \n",
      "4           86.0  ...               10.0                 5.0   \n",
      "\n",
      "    Min VisibilitykM   Max Wind SpeedKm/h   Mean Wind SpeedKm/h  \\\n",
      "0                4.0                   13                     6   \n",
      "1                4.0                   26                     8   \n",
      "2                7.0                   27                    19   \n",
      "3               10.0                   27                    19   \n",
      "4                1.0                   14                     6   \n",
      "\n",
      "    Max Gust SpeedKm/h  Precipitationmm   CloudCover     Events  \\\n",
      "0                  NaN              0.0          6.0        NaN   \n",
      "1                 47.0              0.0          5.0       Rain   \n",
      "2                  NaN              0.0          6.0  Rain-Snow   \n",
      "3                 40.0              0.0          2.0        NaN   \n",
      "4                  NaN              0.0          7.0       Snow   \n",
      "\n",
      "   WindDirDegrees  \n",
      "0             229  \n",
      "1             143  \n",
      "2             256  \n",
      "3             284  \n",
      "4               2  \n",
      "\n",
      "[5 rows x 23 columns]\n"
     ]
    }
   ],
   "source": [
    "print(weather_data.head())\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "a7e49fe7-7497-4b60-88af-e4cd272db53b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Column 'Precipitation' not found.\n"
     ]
    }
   ],
   "source": [
    "if 'Precipitation' in weather_data.columns:\n",
    "    precipitation_days = weather_data[weather_data['Precipitation'] > 0].shape[0]\n",
    "else:\n",
    "    print(\"Column 'Precipitation' not found.\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "55a40362-35b4-4674-92a8-9814cbc89cb5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Column 'Precipitation' not found in the DataFrame.\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "\n",
    "# Load your data from a CSV file\n",
    "# Make sure to replace 'your_file.csv' with the actual path to your CSV file\n",
    "weather_data = pd.read_csv('Madrid Daily Weather 1997-2015.csv')\n",
    "\n",
    "# Check if 'Precipitation' column exists\n",
    "if 'Precipitation' in weather_data.columns:\n",
    "    try:\n",
    "        # Calculate the number of days with precipitation events\n",
    "        precipitation_days = weather_data[weather_data['Precipitation'] > 0].shape[0]\n",
    "        total_days = weather_data.shape[0]\n",
    "        percentage_precipitation = (precipitation_days / total_days) * 100 if total_days > 0 else 0\n",
    "        \n",
    "        # Print results\n",
    "        print(f\"Number of days with precipitation events: {precipitation_days}\")\n",
    "        print(f\"Total number of days: {total_days}\")\n",
    "        print(f\"Percentage of days with precipitation: {percentage_precipitation:.2f}%\")\n",
    "        \n",
    "    except Exception as e:\n",
    "        print(f\"An error occurred during calculations: {e}\")\n",
    "else:\n",
    "    print(\"Column 'Precipitation' not found in the DataFrame.\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "889e3f61-dd14-4b70-b19b-9f87276d16dd",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of days with precipitation events: 245\n",
      "Total number of days: 6812\n",
      "Percentage of days with precipitation: 3.60%\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "\n",
    "# Load your data from a CSV file\n",
    "# Make sure to replace 'your_file.csv' with the actual path to your CSV file\n",
    "weather_data = pd.read_csv('Madrid Daily Weather 1997-2015.csv')\n",
    "\n",
    "# Check if 'Precipitationmm' column exists\n",
    "if 'Precipitationmm' in weather_data.columns:\n",
    "    try:\n",
    "        # Calculate the number of days with precipitation events\n",
    "        precipitation_days = weather_data[weather_data['Precipitationmm'] > 0].shape[0]\n",
    "        total_days = weather_data.shape[0]\n",
    "        percentage_precipitation = (precipitation_days / total_days) * 100 if total_days > 0 else 0\n",
    "        \n",
    "        # Print results\n",
    "        print(f\"Number of days with precipitation events: {precipitation_days}\")\n",
    "        print(f\"Total number of days: {total_days}\")\n",
    "        print(f\"Percentage of days with precipitation: {percentage_precipitation:.2f}%\")\n",
    "        \n",
    "    except Exception as e:\n",
    "        print(f\"An error occurred during calculations: {e}\")\n",
    "else:\n",
    "    print(\"Column 'Precipitationmm' not found in the DataFrame.\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "1b6d222f-9351-4148-80fa-35de7fcb4768",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "\n",
    "# Plot histogram of precipitation\n",
    "plt.figure(figsize=(10, 6))\n",
    "sns.histplot(weather_data['Precipitationmm'], bins=30, kde=True)\n",
    "plt.title('Distribution of Precipitation (mm)')\n",
    "plt.xlabel('Precipitation (mm)')\n",
    "plt.ylabel('Frequency')\n",
    "plt.show()\n",
    "\n",
    "# Plot time series if you have a date column\n",
    "if 'Date' in weather_data.columns:\n",
    "    weather_data['Date'] = pd.to_datetime(weather_data['Date'])\n",
    "    plt.figure(figsize=(12, 6))\n",
    "    plt.plot(weather_data['Date'], weather_data['Precipitationmm'])\n",
    "    plt.title('Precipitation Over Time')\n",
    "    plt.xlabel('Date')\n",
    "    plt.ylabel('Precipitation (mm)')\n",
    "    plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "22826926-bbe6-4938-9ecd-176d88d3b378",
   "metadata": {},
   "outputs": [],
   "source": [
    "if 'Date' in weather_data.columns:\n",
    "    weather_data['Month'] = weather_data['Date'].dt.to_period('M')\n",
    "    monthly_precipitation = weather_data.groupby('Month')['Precipitationmm'].sum()\n",
    "\n",
    "    plt.figure(figsize=(12, 6))\n",
    "    monthly_precipitation.plot(kind='bar')\n",
    "    plt.title('Monthly Total Precipitation')\n",
    "    plt.xlabel('Month')\n",
    "    plt.ylabel('Total Precipitation (mm)')\n",
    "    plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "ec0dd205-6414-4e68-a93c-efec2f4fdba5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Summary Statistics:\n",
      "count    6812.000000\n",
      "mean        0.111182\n",
      "std         0.967174\n",
      "min         0.000000\n",
      "25%         0.000000\n",
      "50%         0.000000\n",
      "75%         0.000000\n",
      "max        32.000000\n",
      "Name: Precipitationmm, dtype: float64\n"
     ]
    }
   ],
   "source": [
    "print(\"Summary Statistics:\")\n",
    "print(weather_data['Precipitationmm'].describe())\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "ffebaf15-713d-408d-8636-e7724533e048",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Example: Compare precipitation with temperature if 'Temperature' column exists\n",
    "if 'Temperature' in weather_data.columns:\n",
    "    plt.figure(figsize=(10, 6))\n",
    "    sns.scatterplot(x='Temperature', y='Precipitationmm', data=weather_data)\n",
    "    plt.title('Precipitation vs Temperature')\n",
    "    plt.xlabel('Temperature (°C)')\n",
    "    plt.ylabel('Precipitation (mm)')\n",
    "    plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "id": "8d5c1a80-75fc-4f3a-89da-0accf34719f0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Missing values in each column:\n",
      "CET                               0\n",
      "Max TemperatureC                  2\n",
      "Mean TemperatureC                 3\n",
      "Min TemperatureC                  2\n",
      "Dew PointC                        2\n",
      "MeanDew PointC                    2\n",
      "Min DewpointC                     2\n",
      "Max Humidity                      2\n",
      " Mean Humidity                    2\n",
      " Min Humidity                     2\n",
      " Max Sea Level PressurehPa        0\n",
      " Mean Sea Level PressurehPa       0\n",
      " Min Sea Level PressurehPa        0\n",
      " Max VisibilityKm               940\n",
      " Mean VisibilityKm              940\n",
      " Min VisibilitykM               940\n",
      " Max Wind SpeedKm/h               0\n",
      " Mean Wind SpeedKm/h              0\n",
      " Max Gust SpeedKm/h            3306\n",
      "Precipitationmm                   0\n",
      " CloudCover                    1372\n",
      " Events                        5014\n",
      "WindDirDegrees                    0\n",
      "dtype: int64\n"
     ]
    }
   ],
   "source": [
    "# Check for missing values\n",
    "print(\"Missing values in each column:\")\n",
    "print(weather_data.isnull().sum())\n",
    "\n",
    "# Optionally, fill missing values\n",
    "# weather_data['Precipitationmm'].fillna(0, inplace=True)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "7313b23b-b1ad-4412-be1e-6f8f829d5a51",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>CET</th>\n",
       "      <th>Max TemperatureC</th>\n",
       "      <th>Mean TemperatureC</th>\n",
       "      <th>Min TemperatureC</th>\n",
       "      <th>Dew PointC</th>\n",
       "      <th>MeanDew PointC</th>\n",
       "      <th>Min DewpointC</th>\n",
       "      <th>Max Humidity</th>\n",
       "      <th>Mean Humidity</th>\n",
       "      <th>Min Humidity</th>\n",
       "      <th>...</th>\n",
       "      <th>Max VisibilityKm</th>\n",
       "      <th>Mean VisibilityKm</th>\n",
       "      <th>Min VisibilitykM</th>\n",
       "      <th>Max Wind SpeedKm/h</th>\n",
       "      <th>Mean Wind SpeedKm/h</th>\n",
       "      <th>Max Gust SpeedKm/h</th>\n",
       "      <th>Precipitationmm</th>\n",
       "      <th>CloudCover</th>\n",
       "      <th>Events</th>\n",
       "      <th>WindDirDegrees</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1997-01-01</td>\n",
       "      <td>7.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>95.0</td>\n",
       "      <td>76.0</td>\n",
       "      <td>...</td>\n",
       "      <td>10.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>13</td>\n",
       "      <td>6</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>229</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1997-01-02</td>\n",
       "      <td>7.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>92.0</td>\n",
       "      <td>71.0</td>\n",
       "      <td>...</td>\n",
       "      <td>10.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>26</td>\n",
       "      <td>8</td>\n",
       "      <td>47.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>Rain</td>\n",
       "      <td>143</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1997-01-03</td>\n",
       "      <td>5.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>85.0</td>\n",
       "      <td>70.0</td>\n",
       "      <td>...</td>\n",
       "      <td>10.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>27</td>\n",
       "      <td>19</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>Rain-Snow</td>\n",
       "      <td>256</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1997-01-04</td>\n",
       "      <td>7.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>-2.0</td>\n",
       "      <td>-3.0</td>\n",
       "      <td>-4.0</td>\n",
       "      <td>86.0</td>\n",
       "      <td>63.0</td>\n",
       "      <td>49.0</td>\n",
       "      <td>...</td>\n",
       "      <td>10.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>27</td>\n",
       "      <td>19</td>\n",
       "      <td>40.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>284</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1997-01-05</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>-3.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>95.0</td>\n",
       "      <td>86.0</td>\n",
       "      <td>...</td>\n",
       "      <td>10.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>14</td>\n",
       "      <td>6</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>Snow</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 23 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "          CET  Max TemperatureC  Mean TemperatureC  Min TemperatureC  \\\n",
       "0  1997-01-01               7.0                4.0               2.0   \n",
       "1  1997-01-02               7.0                3.0               0.0   \n",
       "2  1997-01-03               5.0                3.0               2.0   \n",
       "3  1997-01-04               7.0                3.0              -1.0   \n",
       "4  1997-01-05               2.0                0.0              -1.0   \n",
       "\n",
       "   Dew PointC  MeanDew PointC  Min DewpointC  Max Humidity   Mean Humidity  \\\n",
       "0         5.0             3.0            2.0         100.0            95.0   \n",
       "1         6.0             3.0            0.0         100.0            92.0   \n",
       "2         5.0             1.0           -1.0         100.0            85.0   \n",
       "3        -2.0            -3.0           -4.0          86.0            63.0   \n",
       "4         2.0             0.0           -3.0         100.0            95.0   \n",
       "\n",
       "    Min Humidity  ...   Max VisibilityKm   Mean VisibilityKm  \\\n",
       "0           76.0  ...               10.0                 9.0   \n",
       "1           71.0  ...               10.0                 9.0   \n",
       "2           70.0  ...               10.0                10.0   \n",
       "3           49.0  ...               10.0                10.0   \n",
       "4           86.0  ...               10.0                 5.0   \n",
       "\n",
       "    Min VisibilitykM   Max Wind SpeedKm/h   Mean Wind SpeedKm/h  \\\n",
       "0                4.0                   13                     6   \n",
       "1                4.0                   26                     8   \n",
       "2                7.0                   27                    19   \n",
       "3               10.0                   27                    19   \n",
       "4                1.0                   14                     6   \n",
       "\n",
       "    Max Gust SpeedKm/h  Precipitationmm   CloudCover     Events  \\\n",
       "0                  NaN              0.0          6.0        NaN   \n",
       "1                 47.0              0.0          5.0       Rain   \n",
       "2                  NaN              0.0          6.0  Rain-Snow   \n",
       "3                 40.0              0.0          2.0        NaN   \n",
       "4                  NaN              0.0          7.0       Snow   \n",
       "\n",
       "   WindDirDegrees  \n",
       "0             229  \n",
       "1             143  \n",
       "2             256  \n",
       "3             284  \n",
       "4               2  \n",
       "\n",
       "[5 rows x 23 columns]"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "\n",
    "# Load the dataset\n",
    "file_path = 'Madrid Daily Weather 1997-2015.csv'\n",
    "df = pd.read_csv(file_path)\n",
    "\n",
    "# Display the first few rows of the dataframe\n",
    "df.head()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "e4f7ef29-33f8-4f0e-b588-22809cf9012a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(3.596594245449207, 1.2477980035231944)"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "\n",
    "# Load the dataset\n",
    "file_path = 'Madrid Daily Weather 1997-2015.csv'\n",
    "df = pd.read_csv(file_path)\n",
    "\n",
    "# Check for precipitation events\n",
    "df['Precipitation Event'] = df['Precipitationmm'] > 0\n",
    "\n",
    "# Calculate percentage of days with precipitation events\n",
    "precipitation_days = df['Precipitation Event'].sum()\n",
    "total_days = df.shape[0]\n",
    "percentage_precipitation = (precipitation_days / total_days) * 100\n",
    "\n",
    "# Calculate percentage of clear days using the correct column name\n",
    "clear_days = df[df[' CloudCover'] == 0].shape[0]\n",
    "percentage_clear = (clear_days / total_days) * 100\n",
    "\n",
    "percentage_precipitation, percentage_clear\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "af9a7992-2d26-4a03-aa52-2696bfdad982",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "7"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Convert the date column to datetime\n",
    "df['Date'] = pd.to_datetime(df['CET'])\n",
    "\n",
    "# Extract the month from the date\n",
    "df['Month'] = df['Date'].dt.month\n",
    "\n",
    "# Find the month with the highest average maximum temperature\n",
    "warmest_month = df.groupby('Month')['Max TemperatureC'].mean().idxmax()\n",
    "warmest_month\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "68c007f2-2ca8-4910-bbba-fcae1390caca",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(Timestamp('1999-12-15 00:00:00'),\n",
       " CET                                     1999-12-15\n",
       " Max TemperatureC                              11.0\n",
       " Mean TemperatureC                              7.0\n",
       " Min TemperatureC                               3.0\n",
       " Dew PointC                                    10.0\n",
       " MeanDew PointC                                 2.0\n",
       " Min DewpointC                                 -4.0\n",
       " Max Humidity                                  94.0\n",
       "  Mean Humidity                                71.0\n",
       "  Min Humidity                                 46.0\n",
       "  Max Sea Level PressurehPa                    1016\n",
       "  Mean Sea Level PressurehPa                   1009\n",
       "  Min Sea Level PressurehPa                    1004\n",
       "  Max VisibilityKm                             10.0\n",
       "  Mean VisibilityKm                            10.0\n",
       "  Min VisibilitykM                             10.0\n",
       "  Max Wind SpeedKm/h                            182\n",
       "  Mean Wind SpeedKm/h                            29\n",
       "  Max Gust SpeedKm/h                            NaN\n",
       " Precipitationmm                                0.0\n",
       "  CloudCover                                    5.0\n",
       "  Events                                        NaN\n",
       " WindDirDegrees                                 336\n",
       " Precipitation Event                          False\n",
       " Date                           1999-12-15 00:00:00\n",
       " Month                                           12\n",
       " Name: 1078, dtype: object)"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Find the date with the fastest wind gust\n",
    "fastest_wind_gust = df[' Max Wind SpeedKm/h'].idxmax()\n",
    "fastest_wind_gust_date = df.loc[fastest_wind_gust, 'Date']\n",
    "\n",
    "# Get the weather details on that date\n",
    "weather_on_fastest_wind_gust = df.loc[fastest_wind_gust]\n",
    "\n",
    "fastest_wind_gust_date, weather_on_fastest_wind_gust\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "ebccbc19-be6b-4064-9c77-f40361ec61e4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(7.905882352941177, 0.0)"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Define clear days (CloudCover = 0) and foggy days (Visibility < a certain threshold, e.g., 1 km)\n",
    "clear_days_visibility = df[df[' CloudCover'] == 0][' Mean VisibilityKm'].mean()\n",
    "foggy_days_visibility = df[df[' Mean VisibilityKm'] < 1][' Mean VisibilityKm'].mean()\n",
    "\n",
    "clear_days_visibility, foggy_days_visibility\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "02096fea-5119-43c1-a9fa-f6ce378b41da",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(3.596594245449207,\n",
       " 1.2477980035231944,\n",
       " 7,\n",
       " Timestamp('1997-11-06 00:00:00'),\n",
       " CET                                    1997-11-06\n",
       " Max TemperatureC                             16.0\n",
       " Mean TemperatureC                            11.0\n",
       " Min TemperatureC                              6.0\n",
       " Dew PointC                                   12.0\n",
       " MeanDew PointC                                5.0\n",
       " Min DewpointC                                 1.0\n",
       " Max Humidity                                 88.0\n",
       " Mean Humidity                                70.0\n",
       " Min Humidity                                 54.0\n",
       " Max Sea Level PressurehPa                    1003\n",
       " Mean Sea Level PressurehPa                    992\n",
       " Min Sea Level PressurehPa                     981\n",
       " Max VisibilityKm                             10.0\n",
       " Mean VisibilityKm                             9.0\n",
       " Min VisibilitykM                              5.0\n",
       " Max Wind SpeedKm/h                             58\n",
       " Mean Wind SpeedKm/h                            27\n",
       " Max Gust SpeedKm/h                          103.0\n",
       " Precipitationmm                               0.0\n",
       " CloudCover                                    5.0\n",
       " Events                                       Rain\n",
       " WindDirDegrees                                224\n",
       " Precipitation Event                         False\n",
       " Date                          1997-11-06 00:00:00\n",
       " Month                                          11\n",
       " Name: 309, dtype: object,\n",
       " 7.905882352941177,\n",
       " 0.0)"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "\n",
    "# Load the dataset\n",
    "file_path = 'Madrid Daily Weather 1997-2015.csv'\n",
    "df = pd.read_csv(file_path)\n",
    "\n",
    "# Trim spaces from column names\n",
    "df.columns = df.columns.str.strip()\n",
    "\n",
    "# Check for precipitation events\n",
    "df['Precipitation Event'] = df['Precipitationmm'] > 0\n",
    "\n",
    "# Calculate percentage of days with precipitation events\n",
    "precipitation_days = df['Precipitation Event'].sum()\n",
    "total_days = df.shape[0]\n",
    "percentage_precipitation = (precipitation_days / total_days) * 100\n",
    "\n",
    "# Calculate percentage of clear days\n",
    "clear_days = df[df['CloudCover'] == 0].shape[0]\n",
    "percentage_clear = (clear_days / total_days) * 100\n",
    "\n",
    "# Convert the date column to datetime\n",
    "df['Date'] = pd.to_datetime(df['CET'])\n",
    "\n",
    "# Extract the month from the date\n",
    "df['Month'] = df['Date'].dt.month\n",
    "\n",
    "# Find the month with the highest average maximum temperature\n",
    "warmest_month = df.groupby('Month')['Max TemperatureC'].mean().idxmax()\n",
    "\n",
    "# Find the date with the fastest wind gust\n",
    "fastest_wind_gust = df['Max Gust SpeedKm/h'].idxmax()\n",
    "fastest_wind_gust_date = df.loc[fastest_wind_gust, 'Date']\n",
    "\n",
    "# Get the weather details on that date\n",
    "weather_on_fastest_wind_gust = df.loc[fastest_wind_gust]\n",
    "\n",
    "# Define clear days (CloudCover = 0) and foggy days (Visibility < a certain threshold, e.g., 1 km)\n",
    "clear_days_visibility = df[df['CloudCover'] == 0]['Mean VisibilityKm'].mean()\n",
    "foggy_days_visibility = df[df['Mean VisibilityKm'] < 1]['Mean VisibilityKm'].mean()\n",
    "\n",
    "# Results\n",
    "percentage_precipitation, percentage_clear, warmest_month, fastest_wind_gust_date, weather_on_fastest_wind_gust, clear_days_visibility, foggy_days_visibility\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "23f4257a-493b-41ef-8723-a0623153d33f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['CET', 'Max TemperatureC', 'Mean TemperatureC', 'Min TemperatureC',\n",
       "       'Dew PointC', 'MeanDew PointC', 'Min DewpointC', 'Max Humidity',\n",
       "       'Mean Humidity', 'Min Humidity', 'Max Sea Level PressurehPa',\n",
       "       'Mean Sea Level PressurehPa', 'Min Sea Level PressurehPa',\n",
       "       'Max VisibilityKm', 'Mean VisibilityKm', 'Min VisibilitykM',\n",
       "       'Max Wind SpeedKm/h', 'Mean Wind SpeedKm/h', 'Max Gust SpeedKm/h',\n",
       "       'Precipitationmm', 'CloudCover', 'Events', 'WindDirDegrees',\n",
       "       'Precipitation Event', 'Date', 'Month'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Display column names to identify the correct name for 'CloudCover'\n",
    "df.columns\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "decb576d-8ba1-43f4-8a38-d75ce8803fd2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['CET', 'Max TemperatureC', 'Mean TemperatureC', 'Min TemperatureC',\n",
       "       'Dew PointC', 'MeanDew PointC', 'Min DewpointC', 'Max Humidity',\n",
       "       ' Mean Humidity', ' Min Humidity', ' Max Sea Level PressurehPa',\n",
       "       ' Mean Sea Level PressurehPa', ' Min Sea Level PressurehPa',\n",
       "       ' Max VisibilityKm', ' Mean VisibilityKm', ' Min VisibilitykM',\n",
       "       ' Max Wind SpeedKm/h', ' Mean Wind SpeedKm/h', ' Max Gust SpeedKm/h',\n",
       "       'Precipitationmm', ' CloudCover', ' Events', 'WindDirDegrees'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "\n",
    "# Load the dataset\n",
    "file_path = 'Madrid Daily Weather 1997-2015.csv'\n",
    "df = pd.read_csv(file_path)\n",
    "\n",
    "# Display the original column names to verify any leading/trailing spaces\n",
    "df.columns\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "766ac36a-c904-4de2-99f5-0de55abd70a0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Index(['CET', 'Max TemperatureC', 'Mean TemperatureC', 'Min TemperatureC',\n",
      "       'Dew PointC', 'MeanDew PointC', 'Min DewpointC', 'Max Humidity',\n",
      "       'Mean Humidity', 'Min Humidity', 'Max Sea Level PressurehPa',\n",
      "       'Mean Sea Level PressurehPa', 'Min Sea Level PressurehPa',\n",
      "       'Max VisibilityKm', 'Mean VisibilityKm', 'Min VisibilitykM',\n",
      "       'Max Wind SpeedKm/h', 'Mean Wind SpeedKm/h', 'Max Gust SpeedKm/h',\n",
      "       'Precipitationmm', 'CloudCover', 'Events', 'WindDirDegrees'],\n",
      "      dtype='object')\n"
     ]
    }
   ],
   "source": [
    "# Trim spaces from column names\n",
    "df.columns = df.columns.str.strip()\n",
    "\n",
    "# Verify column names after trimming\n",
    "print(df.columns)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "b08c5d78-1523-4c14-b843-b8bd0e520969",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Index(['CET', 'Max TemperatureC', 'Mean TemperatureC', 'Min TemperatureC',\n",
      "       'Dew PointC', 'MeanDew PointC', 'Min DewpointC', 'Max Humidity',\n",
      "       ' Mean Humidity', ' Min Humidity', ' Max Sea Level PressurehPa',\n",
      "       ' Mean Sea Level PressurehPa', ' Min Sea Level PressurehPa',\n",
      "       ' Max VisibilityKm', ' Mean VisibilityKm', ' Min VisibilitykM',\n",
      "       ' Max Wind SpeedKm/h', ' Mean Wind SpeedKm/h', ' Max Gust SpeedKm/h',\n",
      "       'Precipitationmm', ' CloudCover', ' Events', 'WindDirDegrees'],\n",
      "      dtype='object')\n"
     ]
    }
   ],
   "source": [
    "# Check the column names to ensure they match what we are using\n",
    "print(df.columns)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "id": "20cabc09-7979-4e33-af84-84c4ed2a6477",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Index(['CET', 'Max TemperatureC', 'Mean TemperatureC', 'Min TemperatureC',\n",
      "       'Dew PointC', 'MeanDew PointC', 'Min DewpointC', 'Max Humidity',\n",
      "       ' Mean Humidity', ' Min Humidity', ' Max Sea Level PressurehPa',\n",
      "       ' Mean Sea Level PressurehPa', ' Min Sea Level PressurehPa',\n",
      "       ' Max VisibilityKm', ' Mean VisibilityKm', ' Min VisibilitykM',\n",
      "       ' Max Wind SpeedKm/h', ' Mean Wind SpeedKm/h', ' Max Gust SpeedKm/h',\n",
      "       'Precipitationmm', ' CloudCover', ' Events', 'WindDirDegrees'],\n",
      "      dtype='object')\n"
     ]
    }
   ],
   "source": [
    "print(df.columns)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "id": "11143280-0a71-49d5-9987-b55ba7ff1792",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Index(['CET', 'Max TemperatureC', 'Mean TemperatureC', 'Min TemperatureC',\n",
      "       'Dew PointC', 'MeanDew PointC', 'Min DewpointC', 'Max Humidity',\n",
      "       ' Mean Humidity', ' Min Humidity', ' Max Sea Level PressurehPa',\n",
      "       ' Mean Sea Level PressurehPa', ' Min Sea Level PressurehPa',\n",
      "       ' Max VisibilityKm', ' Mean VisibilityKm', ' Min VisibilitykM',\n",
      "       ' Max Wind SpeedKm/h', ' Mean Wind SpeedKm/h', ' Max Gust SpeedKm/h',\n",
      "       'Precipitationmm', ' CloudCover', ' Events', 'WindDirDegrees'],\n",
      "      dtype='object')\n",
      "         CET  Month  Year\n",
      "0 1997-01-01      1  1997\n",
      "1 1997-01-02      1  1997\n",
      "2 1997-01-03      1  1997\n",
      "3 1997-01-04      1  1997\n",
      "4 1997-01-05      1  1997\n"
     ]
    },
    {
     "ename": "TypeError",
     "evalue": "agg function failed [how->mean,dtype->object]",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\pandas\\core\\groupby\\groupby.py:1942\u001b[0m, in \u001b[0;36mGroupBy._agg_py_fallback\u001b[1;34m(self, how, values, ndim, alt)\u001b[0m\n\u001b[0;32m   1941\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[1;32m-> 1942\u001b[0m     res_values \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_grouper\u001b[38;5;241m.\u001b[39magg_series(ser, alt, preserve_dtype\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mTrue\u001b[39;00m)\n\u001b[0;32m   1943\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mException\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m err:\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\pandas\\core\\groupby\\ops.py:864\u001b[0m, in \u001b[0;36mBaseGrouper.agg_series\u001b[1;34m(self, obj, func, preserve_dtype)\u001b[0m\n\u001b[0;32m    862\u001b[0m     preserve_dtype \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mTrue\u001b[39;00m\n\u001b[1;32m--> 864\u001b[0m result \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_aggregate_series_pure_python(obj, func)\n\u001b[0;32m    866\u001b[0m npvalues \u001b[38;5;241m=\u001b[39m lib\u001b[38;5;241m.\u001b[39mmaybe_convert_objects(result, try_float\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mFalse\u001b[39;00m)\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\pandas\\core\\groupby\\ops.py:885\u001b[0m, in \u001b[0;36mBaseGrouper._aggregate_series_pure_python\u001b[1;34m(self, obj, func)\u001b[0m\n\u001b[0;32m    884\u001b[0m \u001b[38;5;28;01mfor\u001b[39;00m i, group \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;28menumerate\u001b[39m(splitter):\n\u001b[1;32m--> 885\u001b[0m     res \u001b[38;5;241m=\u001b[39m func(group)\n\u001b[0;32m    886\u001b[0m     res \u001b[38;5;241m=\u001b[39m extract_result(res)\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\pandas\\core\\groupby\\groupby.py:2454\u001b[0m, in \u001b[0;36mGroupBy.mean.<locals>.<lambda>\u001b[1;34m(x)\u001b[0m\n\u001b[0;32m   2451\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[0;32m   2452\u001b[0m     result \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_cython_agg_general(\n\u001b[0;32m   2453\u001b[0m         \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mmean\u001b[39m\u001b[38;5;124m\"\u001b[39m,\n\u001b[1;32m-> 2454\u001b[0m         alt\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mlambda\u001b[39;00m x: Series(x, copy\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mFalse\u001b[39;00m)\u001b[38;5;241m.\u001b[39mmean(numeric_only\u001b[38;5;241m=\u001b[39mnumeric_only),\n\u001b[0;32m   2455\u001b[0m         numeric_only\u001b[38;5;241m=\u001b[39mnumeric_only,\n\u001b[0;32m   2456\u001b[0m     )\n\u001b[0;32m   2457\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m result\u001b[38;5;241m.\u001b[39m__finalize__(\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mobj, method\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mgroupby\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\pandas\\core\\series.py:6549\u001b[0m, in \u001b[0;36mSeries.mean\u001b[1;34m(self, axis, skipna, numeric_only, **kwargs)\u001b[0m\n\u001b[0;32m   6541\u001b[0m \u001b[38;5;129m@doc\u001b[39m(make_doc(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mmean\u001b[39m\u001b[38;5;124m\"\u001b[39m, ndim\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m1\u001b[39m))\n\u001b[0;32m   6542\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mmean\u001b[39m(\n\u001b[0;32m   6543\u001b[0m     \u001b[38;5;28mself\u001b[39m,\n\u001b[1;32m   (...)\u001b[0m\n\u001b[0;32m   6547\u001b[0m     \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs,\n\u001b[0;32m   6548\u001b[0m ):\n\u001b[1;32m-> 6549\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m NDFrame\u001b[38;5;241m.\u001b[39mmean(\u001b[38;5;28mself\u001b[39m, axis, skipna, numeric_only, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\pandas\\core\\generic.py:12420\u001b[0m, in \u001b[0;36mNDFrame.mean\u001b[1;34m(self, axis, skipna, numeric_only, **kwargs)\u001b[0m\n\u001b[0;32m  12413\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mmean\u001b[39m(\n\u001b[0;32m  12414\u001b[0m     \u001b[38;5;28mself\u001b[39m,\n\u001b[0;32m  12415\u001b[0m     axis: Axis \u001b[38;5;241m|\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m \u001b[38;5;241m=\u001b[39m \u001b[38;5;241m0\u001b[39m,\n\u001b[1;32m   (...)\u001b[0m\n\u001b[0;32m  12418\u001b[0m     \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs,\n\u001b[0;32m  12419\u001b[0m ) \u001b[38;5;241m-\u001b[39m\u001b[38;5;241m>\u001b[39m Series \u001b[38;5;241m|\u001b[39m \u001b[38;5;28mfloat\u001b[39m:\n\u001b[1;32m> 12420\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_stat_function(\n\u001b[0;32m  12421\u001b[0m         \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mmean\u001b[39m\u001b[38;5;124m\"\u001b[39m, nanops\u001b[38;5;241m.\u001b[39mnanmean, axis, skipna, numeric_only, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs\n\u001b[0;32m  12422\u001b[0m     )\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\pandas\\core\\generic.py:12377\u001b[0m, in \u001b[0;36mNDFrame._stat_function\u001b[1;34m(self, name, func, axis, skipna, numeric_only, **kwargs)\u001b[0m\n\u001b[0;32m  12375\u001b[0m validate_bool_kwarg(skipna, \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mskipna\u001b[39m\u001b[38;5;124m\"\u001b[39m, none_allowed\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mFalse\u001b[39;00m)\n\u001b[1;32m> 12377\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_reduce(\n\u001b[0;32m  12378\u001b[0m     func, name\u001b[38;5;241m=\u001b[39mname, axis\u001b[38;5;241m=\u001b[39maxis, skipna\u001b[38;5;241m=\u001b[39mskipna, numeric_only\u001b[38;5;241m=\u001b[39mnumeric_only\n\u001b[0;32m  12379\u001b[0m )\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\pandas\\core\\series.py:6457\u001b[0m, in \u001b[0;36mSeries._reduce\u001b[1;34m(self, op, name, axis, skipna, numeric_only, filter_type, **kwds)\u001b[0m\n\u001b[0;32m   6453\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mTypeError\u001b[39;00m(\n\u001b[0;32m   6454\u001b[0m         \u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mSeries.\u001b[39m\u001b[38;5;132;01m{\u001b[39;00mname\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m does not allow \u001b[39m\u001b[38;5;132;01m{\u001b[39;00mkwd_name\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m=\u001b[39m\u001b[38;5;132;01m{\u001b[39;00mnumeric_only\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m \u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[0;32m   6455\u001b[0m         \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mwith non-numeric dtypes.\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[0;32m   6456\u001b[0m     )\n\u001b[1;32m-> 6457\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m op(delegate, skipna\u001b[38;5;241m=\u001b[39mskipna, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwds)\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\pandas\\core\\nanops.py:147\u001b[0m, in \u001b[0;36mbottleneck_switch.__call__.<locals>.f\u001b[1;34m(values, axis, skipna, **kwds)\u001b[0m\n\u001b[0;32m    146\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[1;32m--> 147\u001b[0m     result \u001b[38;5;241m=\u001b[39m alt(values, axis\u001b[38;5;241m=\u001b[39maxis, skipna\u001b[38;5;241m=\u001b[39mskipna, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwds)\n\u001b[0;32m    149\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m result\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\pandas\\core\\nanops.py:404\u001b[0m, in \u001b[0;36m_datetimelike_compat.<locals>.new_func\u001b[1;34m(values, axis, skipna, mask, **kwargs)\u001b[0m\n\u001b[0;32m    402\u001b[0m     mask \u001b[38;5;241m=\u001b[39m isna(values)\n\u001b[1;32m--> 404\u001b[0m result \u001b[38;5;241m=\u001b[39m func(values, axis\u001b[38;5;241m=\u001b[39maxis, skipna\u001b[38;5;241m=\u001b[39mskipna, mask\u001b[38;5;241m=\u001b[39mmask, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)\n\u001b[0;32m    406\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m datetimelike:\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\pandas\\core\\nanops.py:719\u001b[0m, in \u001b[0;36mnanmean\u001b[1;34m(values, axis, skipna, mask)\u001b[0m\n\u001b[0;32m    718\u001b[0m count \u001b[38;5;241m=\u001b[39m _get_counts(values\u001b[38;5;241m.\u001b[39mshape, mask, axis, dtype\u001b[38;5;241m=\u001b[39mdtype_count)\n\u001b[1;32m--> 719\u001b[0m the_sum \u001b[38;5;241m=\u001b[39m values\u001b[38;5;241m.\u001b[39msum(axis, dtype\u001b[38;5;241m=\u001b[39mdtype_sum)\n\u001b[0;32m    720\u001b[0m the_sum \u001b[38;5;241m=\u001b[39m _ensure_numeric(the_sum)\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\numpy\\core\\_methods.py:49\u001b[0m, in \u001b[0;36m_sum\u001b[1;34m(a, axis, dtype, out, keepdims, initial, where)\u001b[0m\n\u001b[0;32m     47\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21m_sum\u001b[39m(a, axis\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mNone\u001b[39;00m, dtype\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mNone\u001b[39;00m, out\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mNone\u001b[39;00m, keepdims\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mFalse\u001b[39;00m,\n\u001b[0;32m     48\u001b[0m          initial\u001b[38;5;241m=\u001b[39m_NoValue, where\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mTrue\u001b[39;00m):\n\u001b[1;32m---> 49\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m umr_sum(a, axis, dtype, out, keepdims, initial, where)\n",
      "\u001b[1;31mTypeError\u001b[0m: unsupported operand type(s) for +: 'int' and 'str'",
      "\nThe above exception was the direct cause of the following exception:\n",
      "\u001b[1;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[79], line 36\u001b[0m\n\u001b[0;32m     33\u001b[0m \u001b[38;5;28mprint\u001b[39m(df[[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mCET\u001b[39m\u001b[38;5;124m'\u001b[39m, \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mMonth\u001b[39m\u001b[38;5;124m'\u001b[39m, \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mYear\u001b[39m\u001b[38;5;124m'\u001b[39m]]\u001b[38;5;241m.\u001b[39mhead())\n\u001b[0;32m     35\u001b[0m \u001b[38;5;66;03m# Group data by month and calculate average values for various weather variables\u001b[39;00m\n\u001b[1;32m---> 36\u001b[0m monthly_avg \u001b[38;5;241m=\u001b[39m df\u001b[38;5;241m.\u001b[39mgroupby(\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mMonth\u001b[39m\u001b[38;5;124m'\u001b[39m)\u001b[38;5;241m.\u001b[39mmean()\n\u001b[0;32m     38\u001b[0m \u001b[38;5;66;03m# Plot seasonal patterns for temperature\u001b[39;00m\n\u001b[0;32m     39\u001b[0m plt\u001b[38;5;241m.\u001b[39mfigure(figsize\u001b[38;5;241m=\u001b[39m(\u001b[38;5;241m12\u001b[39m, \u001b[38;5;241m6\u001b[39m))\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\pandas\\core\\groupby\\groupby.py:2452\u001b[0m, in \u001b[0;36mGroupBy.mean\u001b[1;34m(self, numeric_only, engine, engine_kwargs)\u001b[0m\n\u001b[0;32m   2445\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_numba_agg_general(\n\u001b[0;32m   2446\u001b[0m         grouped_mean,\n\u001b[0;32m   2447\u001b[0m         executor\u001b[38;5;241m.\u001b[39mfloat_dtype_mapping,\n\u001b[0;32m   2448\u001b[0m         engine_kwargs,\n\u001b[0;32m   2449\u001b[0m         min_periods\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m0\u001b[39m,\n\u001b[0;32m   2450\u001b[0m     )\n\u001b[0;32m   2451\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[1;32m-> 2452\u001b[0m     result \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_cython_agg_general(\n\u001b[0;32m   2453\u001b[0m         \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mmean\u001b[39m\u001b[38;5;124m\"\u001b[39m,\n\u001b[0;32m   2454\u001b[0m         alt\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mlambda\u001b[39;00m x: Series(x, copy\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mFalse\u001b[39;00m)\u001b[38;5;241m.\u001b[39mmean(numeric_only\u001b[38;5;241m=\u001b[39mnumeric_only),\n\u001b[0;32m   2455\u001b[0m         numeric_only\u001b[38;5;241m=\u001b[39mnumeric_only,\n\u001b[0;32m   2456\u001b[0m     )\n\u001b[0;32m   2457\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m result\u001b[38;5;241m.\u001b[39m__finalize__(\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mobj, method\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mgroupby\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\pandas\\core\\groupby\\groupby.py:1998\u001b[0m, in \u001b[0;36mGroupBy._cython_agg_general\u001b[1;34m(self, how, alt, numeric_only, min_count, **kwargs)\u001b[0m\n\u001b[0;32m   1995\u001b[0m     result \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_agg_py_fallback(how, values, ndim\u001b[38;5;241m=\u001b[39mdata\u001b[38;5;241m.\u001b[39mndim, alt\u001b[38;5;241m=\u001b[39malt)\n\u001b[0;32m   1996\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m result\n\u001b[1;32m-> 1998\u001b[0m new_mgr \u001b[38;5;241m=\u001b[39m data\u001b[38;5;241m.\u001b[39mgrouped_reduce(array_func)\n\u001b[0;32m   1999\u001b[0m res \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_wrap_agged_manager(new_mgr)\n\u001b[0;32m   2000\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m how \u001b[38;5;129;01min\u001b[39;00m [\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124midxmin\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124midxmax\u001b[39m\u001b[38;5;124m\"\u001b[39m]:\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\pandas\\core\\internals\\managers.py:1469\u001b[0m, in \u001b[0;36mBlockManager.grouped_reduce\u001b[1;34m(self, func)\u001b[0m\n\u001b[0;32m   1465\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m blk\u001b[38;5;241m.\u001b[39mis_object:\n\u001b[0;32m   1466\u001b[0m     \u001b[38;5;66;03m# split on object-dtype blocks bc some columns may raise\u001b[39;00m\n\u001b[0;32m   1467\u001b[0m     \u001b[38;5;66;03m#  while others do not.\u001b[39;00m\n\u001b[0;32m   1468\u001b[0m     \u001b[38;5;28;01mfor\u001b[39;00m sb \u001b[38;5;129;01min\u001b[39;00m blk\u001b[38;5;241m.\u001b[39m_split():\n\u001b[1;32m-> 1469\u001b[0m         applied \u001b[38;5;241m=\u001b[39m sb\u001b[38;5;241m.\u001b[39mapply(func)\n\u001b[0;32m   1470\u001b[0m         result_blocks \u001b[38;5;241m=\u001b[39m extend_blocks(applied, result_blocks)\n\u001b[0;32m   1471\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\pandas\\core\\internals\\blocks.py:393\u001b[0m, in \u001b[0;36mBlock.apply\u001b[1;34m(self, func, **kwargs)\u001b[0m\n\u001b[0;32m    387\u001b[0m \u001b[38;5;129m@final\u001b[39m\n\u001b[0;32m    388\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mapply\u001b[39m(\u001b[38;5;28mself\u001b[39m, func, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs) \u001b[38;5;241m-\u001b[39m\u001b[38;5;241m>\u001b[39m \u001b[38;5;28mlist\u001b[39m[Block]:\n\u001b[0;32m    389\u001b[0m \u001b[38;5;250m    \u001b[39m\u001b[38;5;124;03m\"\"\"\u001b[39;00m\n\u001b[0;32m    390\u001b[0m \u001b[38;5;124;03m    apply the function to my values; return a block if we are not\u001b[39;00m\n\u001b[0;32m    391\u001b[0m \u001b[38;5;124;03m    one\u001b[39;00m\n\u001b[0;32m    392\u001b[0m \u001b[38;5;124;03m    \"\"\"\u001b[39;00m\n\u001b[1;32m--> 393\u001b[0m     result \u001b[38;5;241m=\u001b[39m func(\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mvalues, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)\n\u001b[0;32m    395\u001b[0m     result \u001b[38;5;241m=\u001b[39m maybe_coerce_values(result)\n\u001b[0;32m    396\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_split_op_result(result)\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\pandas\\core\\groupby\\groupby.py:1995\u001b[0m, in \u001b[0;36mGroupBy._cython_agg_general.<locals>.array_func\u001b[1;34m(values)\u001b[0m\n\u001b[0;32m   1992\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m result\n\u001b[0;32m   1994\u001b[0m \u001b[38;5;28;01massert\u001b[39;00m alt \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m\n\u001b[1;32m-> 1995\u001b[0m result \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_agg_py_fallback(how, values, ndim\u001b[38;5;241m=\u001b[39mdata\u001b[38;5;241m.\u001b[39mndim, alt\u001b[38;5;241m=\u001b[39malt)\n\u001b[0;32m   1996\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m result\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\pandas\\core\\groupby\\groupby.py:1946\u001b[0m, in \u001b[0;36mGroupBy._agg_py_fallback\u001b[1;34m(self, how, values, ndim, alt)\u001b[0m\n\u001b[0;32m   1944\u001b[0m     msg \u001b[38;5;241m=\u001b[39m \u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124magg function failed [how->\u001b[39m\u001b[38;5;132;01m{\u001b[39;00mhow\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m,dtype->\u001b[39m\u001b[38;5;132;01m{\u001b[39;00mser\u001b[38;5;241m.\u001b[39mdtype\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m]\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[0;32m   1945\u001b[0m     \u001b[38;5;66;03m# preserve the kind of exception that raised\u001b[39;00m\n\u001b[1;32m-> 1946\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;28mtype\u001b[39m(err)(msg) \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01merr\u001b[39;00m\n\u001b[0;32m   1948\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m ser\u001b[38;5;241m.\u001b[39mdtype \u001b[38;5;241m==\u001b[39m \u001b[38;5;28mobject\u001b[39m:\n\u001b[0;32m   1949\u001b[0m     res_values \u001b[38;5;241m=\u001b[39m res_values\u001b[38;5;241m.\u001b[39mastype(\u001b[38;5;28mobject\u001b[39m, copy\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mFalse\u001b[39;00m)\n",
      "\u001b[1;31mTypeError\u001b[0m: agg function failed [how->mean,dtype->object]"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Replace with the correct file path\n",
    "file_path = ''\n",
    "\n",
    "# Load the dataset\n",
    "try:\n",
    "    df = pd.read_csv('Madrid Daily Weather 1997-2015.csv')\n",
    "except FileNotFoundError:\n",
    "    print(f\"File not found at {file_path}. Please check the file path and try again.\")\n",
    "    raise\n",
    "\n",
    "# Print column names to check for the correct name of the date column\n",
    "print(df.columns)\n",
    "\n",
    "# Replace 'CET' with the actual name of the date column\n",
    "date_column = 'CET'  # Update this based on your column names\n",
    "\n",
    "# Ensure the date column is in datetime format\n",
    "if date_column in df.columns:\n",
    "    df[date_column] = pd.to_datetime(df[date_column])\n",
    "else:\n",
    "    raise KeyError(f\"The column '{date_column}' is not found in the dataset.\")\n",
    "\n",
    "# Extract the month from the date column and create a new 'Month' column\n",
    "df['Month'] = df[date_column].dt.month\n",
    "\n",
    "# Extract the year from the date column and create a new 'Year' column\n",
    "df['Year'] = df[date_column].dt.year\n",
    "\n",
    "# Verify the new 'Month' and 'Year' columns\n",
    "print(df[['CET', 'Month', 'Year']].head())\n",
    "\n",
    "# Group data by month and calculate average values for various weather variables\n",
    "monthly_avg = df.groupby('Month').mean()\n",
    "\n",
    "# Plot seasonal patterns for temperature\n",
    "plt.figure(figsize=(12, 6))\n",
    "plt.plot(monthly_avg['Max TemperatureC'], label='Max Temperature', marker='o')\n",
    "plt.plot(monthly_avg['Mean TemperatureC'], label='Mean Temperature', marker='o')\n",
    "plt.plot(monthly_avg['Min TemperatureC'], label='Min Temperature', marker='o')\n",
    "plt.xlabel('Month')\n",
    "plt.ylabel('Temperature (°C)')\n",
    "plt.title('Average Monthly Temperatures')\n",
    "plt.legend()\n",
    "plt.grid(True)\n",
    "plt.show()\n",
    "\n",
    "# Plot seasonal patterns for precipitation\n",
    "plt.figure(figsize=(12, 6))\n",
    "plt.plot(monthly_avg['Precipitationmm'], label='Precipitation', color='b', marker='o')\n",
    "plt.xlabel('Month')\n",
    "plt.ylabel('Precipitation (mm)')\n",
    "plt.title('Average Monthly Precipitation')\n",
    "plt.legend()\n",
    "plt.grid(True)\n",
    "plt.show()\n",
    "\n",
    "# Plot seasonal patterns for humidity\n",
    "plt.figure(figsize=(12, 6))\n",
    "plt.plot(monthly_avg['Mean Humidity'], label='Mean Humidity', color='g', marker='o')\n",
    "plt.xlabel('Month')\n",
    "plt.ylabel('Humidity (%)')\n",
    "plt.title('Average Monthly Humidity')\n",
    "plt.legend()\n",
    "plt.grid(True)\n",
    "plt.show()\n",
    "\n",
    "# Plot seasonal patterns for wind speed\n",
    "plt.figure(figsize=(12, 6))\n",
    "plt.plot(monthly_avg['Max Wind SpeedKm/h'], label='Max Wind Speed', color='r', marker='o')\n",
    "plt.xlabel('Month')\n",
    "plt.ylabel('Wind Speed (Km/h)')\n",
    "plt.title('Average Monthly Wind Speed')\n",
    "plt.legend()\n",
    "plt.grid(True)\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "id": "9314dbf8-d3c3-421a-9723-73eec5288ded",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CET                            datetime64[ns]\n",
      "Max TemperatureC                      float64\n",
      "Mean TemperatureC                     float64\n",
      "Min TemperatureC                      float64\n",
      "Dew PointC                            float64\n",
      "MeanDew PointC                        float64\n",
      "Min DewpointC                         float64\n",
      "Max Humidity                          float64\n",
      " Mean Humidity                        float64\n",
      " Min Humidity                         float64\n",
      " Max Sea Level PressurehPa              int64\n",
      " Mean Sea Level PressurehPa             int64\n",
      " Min Sea Level PressurehPa              int64\n",
      " Max VisibilityKm                     float64\n",
      " Mean VisibilityKm                    float64\n",
      " Min VisibilitykM                     float64\n",
      " Max Wind SpeedKm/h                     int64\n",
      " Mean Wind SpeedKm/h                    int64\n",
      " Max Gust SpeedKm/h                   float64\n",
      "Precipitationmm                       float64\n",
      " CloudCover                           float64\n",
      " Events                                object\n",
      "WindDirDegrees                          int64\n",
      "Month                                   int32\n",
      "Year                                    int32\n",
      "dtype: object\n"
     ]
    }
   ],
   "source": [
    "# Check data types of all columns\n",
    "print(df.dtypes)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "id": "b19fefff-5262-43e6-be08-066a0cfb4aba",
   "metadata": {},
   "outputs": [],
   "source": [
    "# List of columns expected to be numeric\n",
    "numeric_columns = ['Max TemperatureC', 'Mean TemperatureC', 'Min TemperatureC', 'Precipitationmm', 'Mean Humidity', 'Max Wind SpeedKm/h']\n",
    "\n",
    "for col in numeric_columns:\n",
    "    if col in df.columns:\n",
    "        # Convert to numeric, forcing errors to NaN\n",
    "        df[col] = pd.to_numeric(df[col], errors='coerce')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "id": "41bc2d5b-c75c-48c4-a1e4-c26333134ea4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Index(['CET', 'Max TemperatureC', 'Mean TemperatureC', 'Min TemperatureC',\n",
      "       'Dew PointC', 'MeanDew PointC', 'Min DewpointC', 'Max Humidity',\n",
      "       ' Mean Humidity', ' Min Humidity', ' Max Sea Level PressurehPa',\n",
      "       ' Mean Sea Level PressurehPa', ' Min Sea Level PressurehPa',\n",
      "       ' Max VisibilityKm', ' Mean VisibilityKm', ' Min VisibilitykM',\n",
      "       ' Max Wind SpeedKm/h', ' Mean Wind SpeedKm/h', ' Max Gust SpeedKm/h',\n",
      "       'Precipitationmm', ' CloudCover', ' Events', 'WindDirDegrees', 'Month',\n",
      "       'Year'],\n",
      "      dtype='object')\n"
     ]
    }
   ],
   "source": [
    "print(df.columns)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "id": "059b049f-1def-4890-9b35-fed80ca4d433",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Adjust numeric_columns based on the actual column names\n",
    "numeric_columns = ['Max TemperatureC', 'Mean TemperatureC', 'Min TemperatureC', 'Precipitationmm']\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "id": "19367b67-e731-4546-8331-28c93ed5cf46",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CET                            datetime64[ns]\n",
      "Max TemperatureC                      float64\n",
      "Mean TemperatureC                     float64\n",
      "Min TemperatureC                      float64\n",
      "Dew PointC                            float64\n",
      "MeanDew PointC                        float64\n",
      "Min DewpointC                         float64\n",
      "Max Humidity                          float64\n",
      " Mean Humidity                        float64\n",
      " Min Humidity                         float64\n",
      " Max Sea Level PressurehPa              int64\n",
      " Mean Sea Level PressurehPa             int64\n",
      " Min Sea Level PressurehPa              int64\n",
      " Max VisibilityKm                     float64\n",
      " Mean VisibilityKm                    float64\n",
      " Min VisibilitykM                     float64\n",
      " Max Wind SpeedKm/h                     int64\n",
      " Mean Wind SpeedKm/h                    int64\n",
      " Max Gust SpeedKm/h                   float64\n",
      "Precipitationmm                       float64\n",
      " CloudCover                           float64\n",
      " Events                                object\n",
      "WindDirDegrees                          int64\n",
      "Month                                   int32\n",
      "Year                                    int32\n",
      "dtype: object\n"
     ]
    }
   ],
   "source": [
    "print(df.dtypes)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "id": "ac3dce0b-3911-47f4-b175-1d5e371a32d8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Columns in the DataFrame:\n",
      "Index(['CET', 'Max TemperatureC', 'Mean TemperatureC', 'Min TemperatureC',\n",
      "       'Dew PointC', 'MeanDew PointC', 'Min DewpointC', 'Max Humidity',\n",
      "       ' Mean Humidity', ' Min Humidity', ' Max Sea Level PressurehPa',\n",
      "       ' Mean Sea Level PressurehPa', ' Min Sea Level PressurehPa',\n",
      "       ' Max VisibilityKm', ' Mean VisibilityKm', ' Min VisibilitykM',\n",
      "       ' Max Wind SpeedKm/h', ' Mean Wind SpeedKm/h', ' Max Gust SpeedKm/h',\n",
      "       'Precipitationmm', ' CloudCover', ' Events', 'WindDirDegrees'],\n",
      "      dtype='object')\n",
      "\n",
      "Data types of columns:\n",
      "CET                             object\n",
      "Max TemperatureC               float64\n",
      "Mean TemperatureC              float64\n",
      "Min TemperatureC               float64\n",
      "Dew PointC                     float64\n",
      "MeanDew PointC                 float64\n",
      "Min DewpointC                  float64\n",
      "Max Humidity                   float64\n",
      " Mean Humidity                 float64\n",
      " Min Humidity                  float64\n",
      " Max Sea Level PressurehPa       int64\n",
      " Mean Sea Level PressurehPa      int64\n",
      " Min Sea Level PressurehPa       int64\n",
      " Max VisibilityKm              float64\n",
      " Mean VisibilityKm             float64\n",
      " Min VisibilitykM              float64\n",
      " Max Wind SpeedKm/h              int64\n",
      " Mean Wind SpeedKm/h             int64\n",
      " Max Gust SpeedKm/h            float64\n",
      "Precipitationmm                float64\n",
      " CloudCover                    float64\n",
      " Events                         object\n",
      "WindDirDegrees                   int64\n",
      "dtype: object\n",
      "\n",
      "Checking for non-numeric values or NaNs in numeric columns:\n",
      "Max TemperatureC     2\n",
      "Mean TemperatureC    3\n",
      "Min TemperatureC     2\n",
      "Precipitationmm      0\n",
      "dtype: int64\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1200x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1200x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Load the dataset (replace with the correct file path)\n",
    "file_path = 'Madrid Daily Weather 1997-2015.csv'\n",
    "df = pd.read_csv(file_path)\n",
    "\n",
    "# Print column names and types\n",
    "print(\"Columns in the DataFrame:\")\n",
    "print(df.columns)\n",
    "print(\"\\nData types of columns:\")\n",
    "print(df.dtypes)\n",
    "\n",
    "# Ensure the date column is in datetime format\n",
    "date_column = 'CET'  # Replace with your actual date column name\n",
    "df[date_column] = pd.to_datetime(df[date_column], errors='coerce')\n",
    "\n",
    "# Extract month and year from the date column\n",
    "df['Month'] = df[date_column].dt.month\n",
    "df['Year'] = df[date_column].dt.year\n",
    "\n",
    "# Convert columns to numeric, if they exist\n",
    "numeric_columns = ['Max TemperatureC', 'Mean TemperatureC', 'Min TemperatureC', 'Precipitationmm']  # Update this list based on your columns\n",
    "\n",
    "for col in numeric_columns:\n",
    "    if col in df.columns:\n",
    "        df[col] = pd.to_numeric(df[col], errors='coerce')\n",
    "\n",
    "# Check for non-numeric values and NaNs\n",
    "print(\"\\nChecking for non-numeric values or NaNs in numeric columns:\")\n",
    "print(df[numeric_columns].isna().sum())\n",
    "\n",
    "# Filter only numeric columns for aggregation\n",
    "numeric_df = df[numeric_columns]\n",
    "\n",
    "# Group data by month and calculate average values\n",
    "monthly_avg = df.groupby('Month').mean(numeric_only=True)\n",
    "\n",
    "# Plot seasonal patterns for temperature\n",
    "plt.figure(figsize=(12, 6))\n",
    "plt.plot(monthly_avg['Max TemperatureC'], label='Max Temperature', marker='o')\n",
    "plt.plot(monthly_avg['Mean TemperatureC'], label='Mean Temperature', marker='o')\n",
    "plt.plot(monthly_avg['Min TemperatureC'], label='Min Temperature', marker='o')\n",
    "plt.xlabel('Month')\n",
    "plt.ylabel('Temperature (°C)')\n",
    "plt.title('Average Monthly Temperatures')\n",
    "plt.legend()\n",
    "plt.grid(True)\n",
    "plt.show()\n",
    "\n",
    "# Plot seasonal patterns for precipitation\n",
    "plt.figure(figsize=(12, 6))\n",
    "plt.plot(monthly_avg['Precipitationmm'], label='Precipitation', color='b', marker='o')\n",
    "plt.xlabel('Month')\n",
    "plt.ylabel('Precipitation (mm)')\n",
    "plt.title('Average Monthly Precipitation')\n",
    "plt.legend()\n",
    "plt.grid(True)\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "id": "8f021a90-0c0d-4802-bd91-b8e0c9f0104c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                   Max TemperatureC  Mean TemperatureC  Min TemperatureC  \\\n",
      "Max TemperatureC           1.000000           0.970983          0.856143   \n",
      "Mean TemperatureC          0.970983           1.000000          0.951917   \n",
      "Min TemperatureC           0.856143           0.951917          1.000000   \n",
      "Precipitationmm           -0.068196          -0.036425          0.002736   \n",
      "\n",
      "                   Precipitationmm  \n",
      "Max TemperatureC         -0.068196  \n",
      "Mean TemperatureC        -0.036425  \n",
      "Min TemperatureC          0.002736  \n",
      "Precipitationmm           1.000000  \n"
     ]
    }
   ],
   "source": [
    "correlation_matrix = df[numeric_columns].corr()\n",
    "print(correlation_matrix)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "id": "c1aad900-6887-4187-adc9-f0cc1afc118c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CET                            datetime64[ns]\n",
      "Max TemperatureC                      float64\n",
      "Mean TemperatureC                     float64\n",
      "Min TemperatureC                      float64\n",
      "Dew PointC                            float64\n",
      "MeanDew PointC                        float64\n",
      "Min DewpointC                         float64\n",
      "Max Humidity                          float64\n",
      " Mean Humidity                        float64\n",
      " Min Humidity                         float64\n",
      " Max Sea Level PressurehPa              int64\n",
      " Mean Sea Level PressurehPa             int64\n",
      " Min Sea Level PressurehPa              int64\n",
      " Max VisibilityKm                     float64\n",
      " Mean VisibilityKm                    float64\n",
      " Min VisibilitykM                     float64\n",
      " Max Wind SpeedKm/h                     int64\n",
      " Mean Wind SpeedKm/h                    int64\n",
      " Max Gust SpeedKm/h                   float64\n",
      "Precipitationmm                       float64\n",
      " CloudCover                           float64\n",
      " Events                                object\n",
      "WindDirDegrees                          int64\n",
      "Month                                   int32\n",
      "Year                                    int32\n",
      "dtype: object\n"
     ]
    },
    {
     "ename": "TypeError",
     "evalue": "agg function failed [how->mean,dtype->object]",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\pandas\\core\\groupby\\groupby.py:1942\u001b[0m, in \u001b[0;36mGroupBy._agg_py_fallback\u001b[1;34m(self, how, values, ndim, alt)\u001b[0m\n\u001b[0;32m   1941\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[1;32m-> 1942\u001b[0m     res_values \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_grouper\u001b[38;5;241m.\u001b[39magg_series(ser, alt, preserve_dtype\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mTrue\u001b[39;00m)\n\u001b[0;32m   1943\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mException\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m err:\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\pandas\\core\\groupby\\ops.py:864\u001b[0m, in \u001b[0;36mBaseGrouper.agg_series\u001b[1;34m(self, obj, func, preserve_dtype)\u001b[0m\n\u001b[0;32m    862\u001b[0m     preserve_dtype \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mTrue\u001b[39;00m\n\u001b[1;32m--> 864\u001b[0m result \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_aggregate_series_pure_python(obj, func)\n\u001b[0;32m    866\u001b[0m npvalues \u001b[38;5;241m=\u001b[39m lib\u001b[38;5;241m.\u001b[39mmaybe_convert_objects(result, try_float\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mFalse\u001b[39;00m)\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\pandas\\core\\groupby\\ops.py:885\u001b[0m, in \u001b[0;36mBaseGrouper._aggregate_series_pure_python\u001b[1;34m(self, obj, func)\u001b[0m\n\u001b[0;32m    884\u001b[0m \u001b[38;5;28;01mfor\u001b[39;00m i, group \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;28menumerate\u001b[39m(splitter):\n\u001b[1;32m--> 885\u001b[0m     res \u001b[38;5;241m=\u001b[39m func(group)\n\u001b[0;32m    886\u001b[0m     res \u001b[38;5;241m=\u001b[39m extract_result(res)\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\pandas\\core\\groupby\\groupby.py:2454\u001b[0m, in \u001b[0;36mGroupBy.mean.<locals>.<lambda>\u001b[1;34m(x)\u001b[0m\n\u001b[0;32m   2451\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[0;32m   2452\u001b[0m     result \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_cython_agg_general(\n\u001b[0;32m   2453\u001b[0m         \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mmean\u001b[39m\u001b[38;5;124m\"\u001b[39m,\n\u001b[1;32m-> 2454\u001b[0m         alt\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mlambda\u001b[39;00m x: Series(x, copy\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mFalse\u001b[39;00m)\u001b[38;5;241m.\u001b[39mmean(numeric_only\u001b[38;5;241m=\u001b[39mnumeric_only),\n\u001b[0;32m   2455\u001b[0m         numeric_only\u001b[38;5;241m=\u001b[39mnumeric_only,\n\u001b[0;32m   2456\u001b[0m     )\n\u001b[0;32m   2457\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m result\u001b[38;5;241m.\u001b[39m__finalize__(\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mobj, method\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mgroupby\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\pandas\\core\\series.py:6549\u001b[0m, in \u001b[0;36mSeries.mean\u001b[1;34m(self, axis, skipna, numeric_only, **kwargs)\u001b[0m\n\u001b[0;32m   6541\u001b[0m \u001b[38;5;129m@doc\u001b[39m(make_doc(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mmean\u001b[39m\u001b[38;5;124m\"\u001b[39m, ndim\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m1\u001b[39m))\n\u001b[0;32m   6542\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mmean\u001b[39m(\n\u001b[0;32m   6543\u001b[0m     \u001b[38;5;28mself\u001b[39m,\n\u001b[1;32m   (...)\u001b[0m\n\u001b[0;32m   6547\u001b[0m     \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs,\n\u001b[0;32m   6548\u001b[0m ):\n\u001b[1;32m-> 6549\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m NDFrame\u001b[38;5;241m.\u001b[39mmean(\u001b[38;5;28mself\u001b[39m, axis, skipna, numeric_only, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\pandas\\core\\generic.py:12420\u001b[0m, in \u001b[0;36mNDFrame.mean\u001b[1;34m(self, axis, skipna, numeric_only, **kwargs)\u001b[0m\n\u001b[0;32m  12413\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mmean\u001b[39m(\n\u001b[0;32m  12414\u001b[0m     \u001b[38;5;28mself\u001b[39m,\n\u001b[0;32m  12415\u001b[0m     axis: Axis \u001b[38;5;241m|\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m \u001b[38;5;241m=\u001b[39m \u001b[38;5;241m0\u001b[39m,\n\u001b[1;32m   (...)\u001b[0m\n\u001b[0;32m  12418\u001b[0m     \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs,\n\u001b[0;32m  12419\u001b[0m ) \u001b[38;5;241m-\u001b[39m\u001b[38;5;241m>\u001b[39m Series \u001b[38;5;241m|\u001b[39m \u001b[38;5;28mfloat\u001b[39m:\n\u001b[1;32m> 12420\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_stat_function(\n\u001b[0;32m  12421\u001b[0m         \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mmean\u001b[39m\u001b[38;5;124m\"\u001b[39m, nanops\u001b[38;5;241m.\u001b[39mnanmean, axis, skipna, numeric_only, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs\n\u001b[0;32m  12422\u001b[0m     )\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\pandas\\core\\generic.py:12377\u001b[0m, in \u001b[0;36mNDFrame._stat_function\u001b[1;34m(self, name, func, axis, skipna, numeric_only, **kwargs)\u001b[0m\n\u001b[0;32m  12375\u001b[0m validate_bool_kwarg(skipna, \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mskipna\u001b[39m\u001b[38;5;124m\"\u001b[39m, none_allowed\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mFalse\u001b[39;00m)\n\u001b[1;32m> 12377\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_reduce(\n\u001b[0;32m  12378\u001b[0m     func, name\u001b[38;5;241m=\u001b[39mname, axis\u001b[38;5;241m=\u001b[39maxis, skipna\u001b[38;5;241m=\u001b[39mskipna, numeric_only\u001b[38;5;241m=\u001b[39mnumeric_only\n\u001b[0;32m  12379\u001b[0m )\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\pandas\\core\\series.py:6457\u001b[0m, in \u001b[0;36mSeries._reduce\u001b[1;34m(self, op, name, axis, skipna, numeric_only, filter_type, **kwds)\u001b[0m\n\u001b[0;32m   6453\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mTypeError\u001b[39;00m(\n\u001b[0;32m   6454\u001b[0m         \u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mSeries.\u001b[39m\u001b[38;5;132;01m{\u001b[39;00mname\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m does not allow \u001b[39m\u001b[38;5;132;01m{\u001b[39;00mkwd_name\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m=\u001b[39m\u001b[38;5;132;01m{\u001b[39;00mnumeric_only\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m \u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[0;32m   6455\u001b[0m         \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mwith non-numeric dtypes.\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[0;32m   6456\u001b[0m     )\n\u001b[1;32m-> 6457\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m op(delegate, skipna\u001b[38;5;241m=\u001b[39mskipna, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwds)\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\pandas\\core\\nanops.py:147\u001b[0m, in \u001b[0;36mbottleneck_switch.__call__.<locals>.f\u001b[1;34m(values, axis, skipna, **kwds)\u001b[0m\n\u001b[0;32m    146\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[1;32m--> 147\u001b[0m     result \u001b[38;5;241m=\u001b[39m alt(values, axis\u001b[38;5;241m=\u001b[39maxis, skipna\u001b[38;5;241m=\u001b[39mskipna, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwds)\n\u001b[0;32m    149\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m result\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\pandas\\core\\nanops.py:404\u001b[0m, in \u001b[0;36m_datetimelike_compat.<locals>.new_func\u001b[1;34m(values, axis, skipna, mask, **kwargs)\u001b[0m\n\u001b[0;32m    402\u001b[0m     mask \u001b[38;5;241m=\u001b[39m isna(values)\n\u001b[1;32m--> 404\u001b[0m result \u001b[38;5;241m=\u001b[39m func(values, axis\u001b[38;5;241m=\u001b[39maxis, skipna\u001b[38;5;241m=\u001b[39mskipna, mask\u001b[38;5;241m=\u001b[39mmask, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)\n\u001b[0;32m    406\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m datetimelike:\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\pandas\\core\\nanops.py:719\u001b[0m, in \u001b[0;36mnanmean\u001b[1;34m(values, axis, skipna, mask)\u001b[0m\n\u001b[0;32m    718\u001b[0m count \u001b[38;5;241m=\u001b[39m _get_counts(values\u001b[38;5;241m.\u001b[39mshape, mask, axis, dtype\u001b[38;5;241m=\u001b[39mdtype_count)\n\u001b[1;32m--> 719\u001b[0m the_sum \u001b[38;5;241m=\u001b[39m values\u001b[38;5;241m.\u001b[39msum(axis, dtype\u001b[38;5;241m=\u001b[39mdtype_sum)\n\u001b[0;32m    720\u001b[0m the_sum \u001b[38;5;241m=\u001b[39m _ensure_numeric(the_sum)\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\numpy\\core\\_methods.py:49\u001b[0m, in \u001b[0;36m_sum\u001b[1;34m(a, axis, dtype, out, keepdims, initial, where)\u001b[0m\n\u001b[0;32m     47\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21m_sum\u001b[39m(a, axis\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mNone\u001b[39;00m, dtype\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mNone\u001b[39;00m, out\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mNone\u001b[39;00m, keepdims\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mFalse\u001b[39;00m,\n\u001b[0;32m     48\u001b[0m          initial\u001b[38;5;241m=\u001b[39m_NoValue, where\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mTrue\u001b[39;00m):\n\u001b[1;32m---> 49\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m umr_sum(a, axis, dtype, out, keepdims, initial, where)\n",
      "\u001b[1;31mTypeError\u001b[0m: unsupported operand type(s) for +: 'int' and 'str'",
      "\nThe above exception was the direct cause of the following exception:\n",
      "\u001b[1;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[103], line 18\u001b[0m\n\u001b[0;32m     15\u001b[0m df\u001b[38;5;241m.\u001b[39mfillna(\u001b[38;5;241m0\u001b[39m, inplace\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mTrue\u001b[39;00m)  \u001b[38;5;66;03m# or df.dropna(subset=numeric_columns, inplace=True)\u001b[39;00m\n\u001b[0;32m     17\u001b[0m \u001b[38;5;66;03m# Group data and calculate averages\u001b[39;00m\n\u001b[1;32m---> 18\u001b[0m monthly_avg \u001b[38;5;241m=\u001b[39m df\u001b[38;5;241m.\u001b[39mgroupby(\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mMonth\u001b[39m\u001b[38;5;124m'\u001b[39m)\u001b[38;5;241m.\u001b[39mmean()\n\u001b[0;32m     20\u001b[0m \u001b[38;5;66;03m# Plot or analyze the results\u001b[39;00m\n\u001b[0;32m     21\u001b[0m \u001b[38;5;28;01mimport\u001b[39;00m \u001b[38;5;21;01mmatplotlib\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mpyplot\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m \u001b[38;5;21;01mplt\u001b[39;00m\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\pandas\\core\\groupby\\groupby.py:2452\u001b[0m, in \u001b[0;36mGroupBy.mean\u001b[1;34m(self, numeric_only, engine, engine_kwargs)\u001b[0m\n\u001b[0;32m   2445\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_numba_agg_general(\n\u001b[0;32m   2446\u001b[0m         grouped_mean,\n\u001b[0;32m   2447\u001b[0m         executor\u001b[38;5;241m.\u001b[39mfloat_dtype_mapping,\n\u001b[0;32m   2448\u001b[0m         engine_kwargs,\n\u001b[0;32m   2449\u001b[0m         min_periods\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m0\u001b[39m,\n\u001b[0;32m   2450\u001b[0m     )\n\u001b[0;32m   2451\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[1;32m-> 2452\u001b[0m     result \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_cython_agg_general(\n\u001b[0;32m   2453\u001b[0m         \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mmean\u001b[39m\u001b[38;5;124m\"\u001b[39m,\n\u001b[0;32m   2454\u001b[0m         alt\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mlambda\u001b[39;00m x: Series(x, copy\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mFalse\u001b[39;00m)\u001b[38;5;241m.\u001b[39mmean(numeric_only\u001b[38;5;241m=\u001b[39mnumeric_only),\n\u001b[0;32m   2455\u001b[0m         numeric_only\u001b[38;5;241m=\u001b[39mnumeric_only,\n\u001b[0;32m   2456\u001b[0m     )\n\u001b[0;32m   2457\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m result\u001b[38;5;241m.\u001b[39m__finalize__(\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mobj, method\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mgroupby\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\pandas\\core\\groupby\\groupby.py:1998\u001b[0m, in \u001b[0;36mGroupBy._cython_agg_general\u001b[1;34m(self, how, alt, numeric_only, min_count, **kwargs)\u001b[0m\n\u001b[0;32m   1995\u001b[0m     result \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_agg_py_fallback(how, values, ndim\u001b[38;5;241m=\u001b[39mdata\u001b[38;5;241m.\u001b[39mndim, alt\u001b[38;5;241m=\u001b[39malt)\n\u001b[0;32m   1996\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m result\n\u001b[1;32m-> 1998\u001b[0m new_mgr \u001b[38;5;241m=\u001b[39m data\u001b[38;5;241m.\u001b[39mgrouped_reduce(array_func)\n\u001b[0;32m   1999\u001b[0m res \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_wrap_agged_manager(new_mgr)\n\u001b[0;32m   2000\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m how \u001b[38;5;129;01min\u001b[39;00m [\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124midxmin\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124midxmax\u001b[39m\u001b[38;5;124m\"\u001b[39m]:\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\pandas\\core\\internals\\managers.py:1469\u001b[0m, in \u001b[0;36mBlockManager.grouped_reduce\u001b[1;34m(self, func)\u001b[0m\n\u001b[0;32m   1465\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m blk\u001b[38;5;241m.\u001b[39mis_object:\n\u001b[0;32m   1466\u001b[0m     \u001b[38;5;66;03m# split on object-dtype blocks bc some columns may raise\u001b[39;00m\n\u001b[0;32m   1467\u001b[0m     \u001b[38;5;66;03m#  while others do not.\u001b[39;00m\n\u001b[0;32m   1468\u001b[0m     \u001b[38;5;28;01mfor\u001b[39;00m sb \u001b[38;5;129;01min\u001b[39;00m blk\u001b[38;5;241m.\u001b[39m_split():\n\u001b[1;32m-> 1469\u001b[0m         applied \u001b[38;5;241m=\u001b[39m sb\u001b[38;5;241m.\u001b[39mapply(func)\n\u001b[0;32m   1470\u001b[0m         result_blocks \u001b[38;5;241m=\u001b[39m extend_blocks(applied, result_blocks)\n\u001b[0;32m   1471\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\pandas\\core\\internals\\blocks.py:393\u001b[0m, in \u001b[0;36mBlock.apply\u001b[1;34m(self, func, **kwargs)\u001b[0m\n\u001b[0;32m    387\u001b[0m \u001b[38;5;129m@final\u001b[39m\n\u001b[0;32m    388\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mapply\u001b[39m(\u001b[38;5;28mself\u001b[39m, func, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs) \u001b[38;5;241m-\u001b[39m\u001b[38;5;241m>\u001b[39m \u001b[38;5;28mlist\u001b[39m[Block]:\n\u001b[0;32m    389\u001b[0m \u001b[38;5;250m    \u001b[39m\u001b[38;5;124;03m\"\"\"\u001b[39;00m\n\u001b[0;32m    390\u001b[0m \u001b[38;5;124;03m    apply the function to my values; return a block if we are not\u001b[39;00m\n\u001b[0;32m    391\u001b[0m \u001b[38;5;124;03m    one\u001b[39;00m\n\u001b[0;32m    392\u001b[0m \u001b[38;5;124;03m    \"\"\"\u001b[39;00m\n\u001b[1;32m--> 393\u001b[0m     result \u001b[38;5;241m=\u001b[39m func(\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mvalues, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)\n\u001b[0;32m    395\u001b[0m     result \u001b[38;5;241m=\u001b[39m maybe_coerce_values(result)\n\u001b[0;32m    396\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_split_op_result(result)\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\pandas\\core\\groupby\\groupby.py:1995\u001b[0m, in \u001b[0;36mGroupBy._cython_agg_general.<locals>.array_func\u001b[1;34m(values)\u001b[0m\n\u001b[0;32m   1992\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m result\n\u001b[0;32m   1994\u001b[0m \u001b[38;5;28;01massert\u001b[39;00m alt \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m\n\u001b[1;32m-> 1995\u001b[0m result \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_agg_py_fallback(how, values, ndim\u001b[38;5;241m=\u001b[39mdata\u001b[38;5;241m.\u001b[39mndim, alt\u001b[38;5;241m=\u001b[39malt)\n\u001b[0;32m   1996\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m result\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\pandas\\core\\groupby\\groupby.py:1946\u001b[0m, in \u001b[0;36mGroupBy._agg_py_fallback\u001b[1;34m(self, how, values, ndim, alt)\u001b[0m\n\u001b[0;32m   1944\u001b[0m     msg \u001b[38;5;241m=\u001b[39m \u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124magg function failed [how->\u001b[39m\u001b[38;5;132;01m{\u001b[39;00mhow\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m,dtype->\u001b[39m\u001b[38;5;132;01m{\u001b[39;00mser\u001b[38;5;241m.\u001b[39mdtype\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m]\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[0;32m   1945\u001b[0m     \u001b[38;5;66;03m# preserve the kind of exception that raised\u001b[39;00m\n\u001b[1;32m-> 1946\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;28mtype\u001b[39m(err)(msg) \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01merr\u001b[39;00m\n\u001b[0;32m   1948\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m ser\u001b[38;5;241m.\u001b[39mdtype \u001b[38;5;241m==\u001b[39m \u001b[38;5;28mobject\u001b[39m:\n\u001b[0;32m   1949\u001b[0m     res_values \u001b[38;5;241m=\u001b[39m res_values\u001b[38;5;241m.\u001b[39mastype(\u001b[38;5;28mobject\u001b[39m, copy\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mFalse\u001b[39;00m)\n",
      "\u001b[1;31mTypeError\u001b[0m: agg function failed [how->mean,dtype->object]"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "\n",
    "# Load your data\n",
    "# df = pd.read_csv('your_data.csv')\n",
    "\n",
    "# Check data types\n",
    "print(df.dtypes)\n",
    "\n",
    "# Convert columns to numeric\n",
    "numeric_columns = ['Max TemperatureC', 'Mean TemperatureC', 'Min TemperatureC', 'Precipitationmm']  # List of numeric columns\n",
    "for col in numeric_columns:\n",
    "    df[col] = pd.to_numeric(df[col], errors='coerce')\n",
    "\n",
    "# Handle missing values\n",
    "df.fillna(0, inplace=True)  # or df.dropna(subset=numeric_columns, inplace=True)\n",
    "\n",
    "# Group data and calculate averages\n",
    "monthly_avg = df.groupby('Month').mean()\n",
    "\n",
    "# Plot or analyze the results\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "plt.figure(figsize=(12, 6))\n",
    "plt.plot(monthly_avg['Max TemperatureC'], label='Max Temperature', marker='o')\n",
    "plt.plot(monthly_avg['Mean TemperatureC'], label='Mean Temperature', marker='o')\n",
    "plt.plot(monthly_avg['Min TemperatureC'], label='Min Temperature', marker='o')\n",
    "plt.xlabel('Month')\n",
    "plt.ylabel('Temperature (°C)')\n",
    "plt.title('Monthly Average Temperatures')\n",
    "plt.legend()\n",
    "plt.grid(True)\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 105,
   "id": "3770ab59-6de9-48a2-96c4-42156b668e32",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CET                            datetime64[ns]\n",
      "Max TemperatureC                      float64\n",
      "Mean TemperatureC                     float64\n",
      "Min TemperatureC                      float64\n",
      "Dew PointC                            float64\n",
      "MeanDew PointC                        float64\n",
      "Min DewpointC                         float64\n",
      "Max Humidity                          float64\n",
      " Mean Humidity                        float64\n",
      " Min Humidity                         float64\n",
      " Max Sea Level PressurehPa              int64\n",
      " Mean Sea Level PressurehPa             int64\n",
      " Min Sea Level PressurehPa              int64\n",
      " Max VisibilityKm                     float64\n",
      " Mean VisibilityKm                    float64\n",
      " Min VisibilitykM                     float64\n",
      " Max Wind SpeedKm/h                     int64\n",
      " Mean Wind SpeedKm/h                    int64\n",
      " Max Gust SpeedKm/h                   float64\n",
      "Precipitationmm                       float64\n",
      " CloudCover                           float64\n",
      " Events                                object\n",
      "WindDirDegrees                          int64\n",
      "Month                                   int32\n",
      "Year                                    int32\n",
      "dtype: object\n"
     ]
    }
   ],
   "source": [
    "print(df.dtypes)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 110,
   "id": "66b9c73a-2b89-48f6-abc9-345ada0f5ebb",
   "metadata": {},
   "outputs": [],
   "source": [
    "numeric_columns = ['Max TemperatureC', 'Mean TemperatureC', 'Min TemperatureC', 'Precipitationmm']  # Example column names\n",
    "for col in numeric_columns:\n",
    "    df[col] = pd.to_numeric(df[col], errors='coerce')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 112,
   "id": "fa6c2326-41c6-4ac2-b5d8-83c37948d400",
   "metadata": {},
   "outputs": [],
   "source": [
    "df.fillna(0, inplace=True)  # Fill NaNs with 0\n",
    "# or\n",
    "df.dropna(subset=numeric_columns, inplace=True)  # Drop rows with NaNs in specified columns\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 114,
   "id": "d8d9a7bc-1c50-4ba6-b04c-616696a7c13b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CET                            datetime64[ns]\n",
      "Max TemperatureC                      float64\n",
      "Mean TemperatureC                     float64\n",
      "Min TemperatureC                      float64\n",
      "Dew PointC                            float64\n",
      "MeanDew PointC                        float64\n",
      "Min DewpointC                         float64\n",
      "Max Humidity                          float64\n",
      " Mean Humidity                        float64\n",
      " Min Humidity                         float64\n",
      " Max Sea Level PressurehPa              int64\n",
      " Mean Sea Level PressurehPa             int64\n",
      " Min Sea Level PressurehPa              int64\n",
      " Max VisibilityKm                     float64\n",
      " Mean VisibilityKm                    float64\n",
      " Min VisibilitykM                     float64\n",
      " Max Wind SpeedKm/h                     int64\n",
      " Mean Wind SpeedKm/h                    int64\n",
      " Max Gust SpeedKm/h                   float64\n",
      "Precipitationmm                       float64\n",
      " CloudCover                           float64\n",
      " Events                                object\n",
      "WindDirDegrees                          int64\n",
      "Month                                   int32\n",
      "Year                                    int32\n",
      "dtype: object\n"
     ]
    }
   ],
   "source": [
    "print(df.dtypes)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 119,
   "id": "748a98aa-fb5a-4157-a287-984f90680863",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CET                            datetime64[ns]\n",
      "Max TemperatureC                      float64\n",
      "Mean TemperatureC                     float64\n",
      "Min TemperatureC                      float64\n",
      "Dew PointC                            float64\n",
      "MeanDew PointC                        float64\n",
      "Min DewpointC                         float64\n",
      "Max Humidity                          float64\n",
      " Mean Humidity                        float64\n",
      " Min Humidity                         float64\n",
      " Max Sea Level PressurehPa              int64\n",
      " Mean Sea Level PressurehPa             int64\n",
      " Min Sea Level PressurehPa              int64\n",
      " Max VisibilityKm                     float64\n",
      " Mean VisibilityKm                    float64\n",
      " Min VisibilitykM                     float64\n",
      " Max Wind SpeedKm/h                     int64\n",
      " Mean Wind SpeedKm/h                    int64\n",
      " Max Gust SpeedKm/h                   float64\n",
      "Precipitationmm                       float64\n",
      " CloudCover                           float64\n",
      " Events                                object\n",
      "WindDirDegrees                          int64\n",
      "Month                                   int32\n",
      "Year                                    int32\n",
      "dtype: object\n",
      "CET                            datetime64[ns]\n",
      "Max TemperatureC                      float64\n",
      "Mean TemperatureC                     float64\n",
      "Min TemperatureC                      float64\n",
      "Dew PointC                            float64\n",
      "MeanDew PointC                        float64\n",
      "Min DewpointC                         float64\n",
      "Max Humidity                          float64\n",
      " Mean Humidity                        float64\n",
      " Min Humidity                         float64\n",
      " Max Sea Level PressurehPa              int64\n",
      " Mean Sea Level PressurehPa             int64\n",
      " Min Sea Level PressurehPa              int64\n",
      " Max VisibilityKm                     float64\n",
      " Mean VisibilityKm                    float64\n",
      " Min VisibilitykM                     float64\n",
      " Max Wind SpeedKm/h                     int64\n",
      " Mean Wind SpeedKm/h                    int64\n",
      " Max Gust SpeedKm/h                   float64\n",
      "Precipitationmm                       float64\n",
      " CloudCover                           float64\n",
      " Events                                object\n",
      "WindDirDegrees                          int64\n",
      "Month                                   int32\n",
      "Year                                    int32\n",
      "dtype: object\n"
     ]
    },
    {
     "ename": "TypeError",
     "evalue": "agg function failed [how->mean,dtype->object]",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\pandas\\core\\groupby\\groupby.py:1942\u001b[0m, in \u001b[0;36mGroupBy._agg_py_fallback\u001b[1;34m(self, how, values, ndim, alt)\u001b[0m\n\u001b[0;32m   1941\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[1;32m-> 1942\u001b[0m     res_values \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_grouper\u001b[38;5;241m.\u001b[39magg_series(ser, alt, preserve_dtype\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mTrue\u001b[39;00m)\n\u001b[0;32m   1943\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mException\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m err:\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\pandas\\core\\groupby\\ops.py:864\u001b[0m, in \u001b[0;36mBaseGrouper.agg_series\u001b[1;34m(self, obj, func, preserve_dtype)\u001b[0m\n\u001b[0;32m    862\u001b[0m     preserve_dtype \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mTrue\u001b[39;00m\n\u001b[1;32m--> 864\u001b[0m result \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_aggregate_series_pure_python(obj, func)\n\u001b[0;32m    866\u001b[0m npvalues \u001b[38;5;241m=\u001b[39m lib\u001b[38;5;241m.\u001b[39mmaybe_convert_objects(result, try_float\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mFalse\u001b[39;00m)\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\pandas\\core\\groupby\\ops.py:885\u001b[0m, in \u001b[0;36mBaseGrouper._aggregate_series_pure_python\u001b[1;34m(self, obj, func)\u001b[0m\n\u001b[0;32m    884\u001b[0m \u001b[38;5;28;01mfor\u001b[39;00m i, group \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;28menumerate\u001b[39m(splitter):\n\u001b[1;32m--> 885\u001b[0m     res \u001b[38;5;241m=\u001b[39m func(group)\n\u001b[0;32m    886\u001b[0m     res \u001b[38;5;241m=\u001b[39m extract_result(res)\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\pandas\\core\\groupby\\groupby.py:2454\u001b[0m, in \u001b[0;36mGroupBy.mean.<locals>.<lambda>\u001b[1;34m(x)\u001b[0m\n\u001b[0;32m   2451\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[0;32m   2452\u001b[0m     result \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_cython_agg_general(\n\u001b[0;32m   2453\u001b[0m         \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mmean\u001b[39m\u001b[38;5;124m\"\u001b[39m,\n\u001b[1;32m-> 2454\u001b[0m         alt\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mlambda\u001b[39;00m x: Series(x, copy\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mFalse\u001b[39;00m)\u001b[38;5;241m.\u001b[39mmean(numeric_only\u001b[38;5;241m=\u001b[39mnumeric_only),\n\u001b[0;32m   2455\u001b[0m         numeric_only\u001b[38;5;241m=\u001b[39mnumeric_only,\n\u001b[0;32m   2456\u001b[0m     )\n\u001b[0;32m   2457\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m result\u001b[38;5;241m.\u001b[39m__finalize__(\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mobj, method\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mgroupby\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\pandas\\core\\series.py:6549\u001b[0m, in \u001b[0;36mSeries.mean\u001b[1;34m(self, axis, skipna, numeric_only, **kwargs)\u001b[0m\n\u001b[0;32m   6541\u001b[0m \u001b[38;5;129m@doc\u001b[39m(make_doc(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mmean\u001b[39m\u001b[38;5;124m\"\u001b[39m, ndim\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m1\u001b[39m))\n\u001b[0;32m   6542\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mmean\u001b[39m(\n\u001b[0;32m   6543\u001b[0m     \u001b[38;5;28mself\u001b[39m,\n\u001b[1;32m   (...)\u001b[0m\n\u001b[0;32m   6547\u001b[0m     \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs,\n\u001b[0;32m   6548\u001b[0m ):\n\u001b[1;32m-> 6549\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m NDFrame\u001b[38;5;241m.\u001b[39mmean(\u001b[38;5;28mself\u001b[39m, axis, skipna, numeric_only, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\pandas\\core\\generic.py:12420\u001b[0m, in \u001b[0;36mNDFrame.mean\u001b[1;34m(self, axis, skipna, numeric_only, **kwargs)\u001b[0m\n\u001b[0;32m  12413\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mmean\u001b[39m(\n\u001b[0;32m  12414\u001b[0m     \u001b[38;5;28mself\u001b[39m,\n\u001b[0;32m  12415\u001b[0m     axis: Axis \u001b[38;5;241m|\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m \u001b[38;5;241m=\u001b[39m \u001b[38;5;241m0\u001b[39m,\n\u001b[1;32m   (...)\u001b[0m\n\u001b[0;32m  12418\u001b[0m     \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs,\n\u001b[0;32m  12419\u001b[0m ) \u001b[38;5;241m-\u001b[39m\u001b[38;5;241m>\u001b[39m Series \u001b[38;5;241m|\u001b[39m \u001b[38;5;28mfloat\u001b[39m:\n\u001b[1;32m> 12420\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_stat_function(\n\u001b[0;32m  12421\u001b[0m         \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mmean\u001b[39m\u001b[38;5;124m\"\u001b[39m, nanops\u001b[38;5;241m.\u001b[39mnanmean, axis, skipna, numeric_only, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs\n\u001b[0;32m  12422\u001b[0m     )\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\pandas\\core\\generic.py:12377\u001b[0m, in \u001b[0;36mNDFrame._stat_function\u001b[1;34m(self, name, func, axis, skipna, numeric_only, **kwargs)\u001b[0m\n\u001b[0;32m  12375\u001b[0m validate_bool_kwarg(skipna, \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mskipna\u001b[39m\u001b[38;5;124m\"\u001b[39m, none_allowed\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mFalse\u001b[39;00m)\n\u001b[1;32m> 12377\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_reduce(\n\u001b[0;32m  12378\u001b[0m     func, name\u001b[38;5;241m=\u001b[39mname, axis\u001b[38;5;241m=\u001b[39maxis, skipna\u001b[38;5;241m=\u001b[39mskipna, numeric_only\u001b[38;5;241m=\u001b[39mnumeric_only\n\u001b[0;32m  12379\u001b[0m )\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\pandas\\core\\series.py:6457\u001b[0m, in \u001b[0;36mSeries._reduce\u001b[1;34m(self, op, name, axis, skipna, numeric_only, filter_type, **kwds)\u001b[0m\n\u001b[0;32m   6453\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mTypeError\u001b[39;00m(\n\u001b[0;32m   6454\u001b[0m         \u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mSeries.\u001b[39m\u001b[38;5;132;01m{\u001b[39;00mname\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m does not allow \u001b[39m\u001b[38;5;132;01m{\u001b[39;00mkwd_name\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m=\u001b[39m\u001b[38;5;132;01m{\u001b[39;00mnumeric_only\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m \u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[0;32m   6455\u001b[0m         \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mwith non-numeric dtypes.\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[0;32m   6456\u001b[0m     )\n\u001b[1;32m-> 6457\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m op(delegate, skipna\u001b[38;5;241m=\u001b[39mskipna, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwds)\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\pandas\\core\\nanops.py:147\u001b[0m, in \u001b[0;36mbottleneck_switch.__call__.<locals>.f\u001b[1;34m(values, axis, skipna, **kwds)\u001b[0m\n\u001b[0;32m    146\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[1;32m--> 147\u001b[0m     result \u001b[38;5;241m=\u001b[39m alt(values, axis\u001b[38;5;241m=\u001b[39maxis, skipna\u001b[38;5;241m=\u001b[39mskipna, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwds)\n\u001b[0;32m    149\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m result\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\pandas\\core\\nanops.py:404\u001b[0m, in \u001b[0;36m_datetimelike_compat.<locals>.new_func\u001b[1;34m(values, axis, skipna, mask, **kwargs)\u001b[0m\n\u001b[0;32m    402\u001b[0m     mask \u001b[38;5;241m=\u001b[39m isna(values)\n\u001b[1;32m--> 404\u001b[0m result \u001b[38;5;241m=\u001b[39m func(values, axis\u001b[38;5;241m=\u001b[39maxis, skipna\u001b[38;5;241m=\u001b[39mskipna, mask\u001b[38;5;241m=\u001b[39mmask, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)\n\u001b[0;32m    406\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m datetimelike:\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\pandas\\core\\nanops.py:719\u001b[0m, in \u001b[0;36mnanmean\u001b[1;34m(values, axis, skipna, mask)\u001b[0m\n\u001b[0;32m    718\u001b[0m count \u001b[38;5;241m=\u001b[39m _get_counts(values\u001b[38;5;241m.\u001b[39mshape, mask, axis, dtype\u001b[38;5;241m=\u001b[39mdtype_count)\n\u001b[1;32m--> 719\u001b[0m the_sum \u001b[38;5;241m=\u001b[39m values\u001b[38;5;241m.\u001b[39msum(axis, dtype\u001b[38;5;241m=\u001b[39mdtype_sum)\n\u001b[0;32m    720\u001b[0m the_sum \u001b[38;5;241m=\u001b[39m _ensure_numeric(the_sum)\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\numpy\\core\\_methods.py:49\u001b[0m, in \u001b[0;36m_sum\u001b[1;34m(a, axis, dtype, out, keepdims, initial, where)\u001b[0m\n\u001b[0;32m     47\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21m_sum\u001b[39m(a, axis\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mNone\u001b[39;00m, dtype\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mNone\u001b[39;00m, out\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mNone\u001b[39;00m, keepdims\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mFalse\u001b[39;00m,\n\u001b[0;32m     48\u001b[0m          initial\u001b[38;5;241m=\u001b[39m_NoValue, where\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mTrue\u001b[39;00m):\n\u001b[1;32m---> 49\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m umr_sum(a, axis, dtype, out, keepdims, initial, where)\n",
      "\u001b[1;31mTypeError\u001b[0m: unsupported operand type(s) for +: 'int' and 'str'",
      "\nThe above exception was the direct cause of the following exception:\n",
      "\u001b[1;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[119], line 22\u001b[0m\n\u001b[0;32m     19\u001b[0m \u001b[38;5;28mprint\u001b[39m(df\u001b[38;5;241m.\u001b[39mdtypes)\n\u001b[0;32m     21\u001b[0m \u001b[38;5;66;03m# Group data and calculate averages\u001b[39;00m\n\u001b[1;32m---> 22\u001b[0m monthly_avg \u001b[38;5;241m=\u001b[39m df\u001b[38;5;241m.\u001b[39mgroupby(\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mMonth\u001b[39m\u001b[38;5;124m'\u001b[39m)\u001b[38;5;241m.\u001b[39mmean()\n\u001b[0;32m     24\u001b[0m \u001b[38;5;66;03m# Plot the results\u001b[39;00m\n\u001b[0;32m     25\u001b[0m plt\u001b[38;5;241m.\u001b[39mfigure(figsize\u001b[38;5;241m=\u001b[39m(\u001b[38;5;241m12\u001b[39m, \u001b[38;5;241m6\u001b[39m))\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\pandas\\core\\groupby\\groupby.py:2452\u001b[0m, in \u001b[0;36mGroupBy.mean\u001b[1;34m(self, numeric_only, engine, engine_kwargs)\u001b[0m\n\u001b[0;32m   2445\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_numba_agg_general(\n\u001b[0;32m   2446\u001b[0m         grouped_mean,\n\u001b[0;32m   2447\u001b[0m         executor\u001b[38;5;241m.\u001b[39mfloat_dtype_mapping,\n\u001b[0;32m   2448\u001b[0m         engine_kwargs,\n\u001b[0;32m   2449\u001b[0m         min_periods\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m0\u001b[39m,\n\u001b[0;32m   2450\u001b[0m     )\n\u001b[0;32m   2451\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[1;32m-> 2452\u001b[0m     result \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_cython_agg_general(\n\u001b[0;32m   2453\u001b[0m         \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mmean\u001b[39m\u001b[38;5;124m\"\u001b[39m,\n\u001b[0;32m   2454\u001b[0m         alt\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mlambda\u001b[39;00m x: Series(x, copy\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mFalse\u001b[39;00m)\u001b[38;5;241m.\u001b[39mmean(numeric_only\u001b[38;5;241m=\u001b[39mnumeric_only),\n\u001b[0;32m   2455\u001b[0m         numeric_only\u001b[38;5;241m=\u001b[39mnumeric_only,\n\u001b[0;32m   2456\u001b[0m     )\n\u001b[0;32m   2457\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m result\u001b[38;5;241m.\u001b[39m__finalize__(\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mobj, method\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mgroupby\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\pandas\\core\\groupby\\groupby.py:1998\u001b[0m, in \u001b[0;36mGroupBy._cython_agg_general\u001b[1;34m(self, how, alt, numeric_only, min_count, **kwargs)\u001b[0m\n\u001b[0;32m   1995\u001b[0m     result \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_agg_py_fallback(how, values, ndim\u001b[38;5;241m=\u001b[39mdata\u001b[38;5;241m.\u001b[39mndim, alt\u001b[38;5;241m=\u001b[39malt)\n\u001b[0;32m   1996\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m result\n\u001b[1;32m-> 1998\u001b[0m new_mgr \u001b[38;5;241m=\u001b[39m data\u001b[38;5;241m.\u001b[39mgrouped_reduce(array_func)\n\u001b[0;32m   1999\u001b[0m res \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_wrap_agged_manager(new_mgr)\n\u001b[0;32m   2000\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m how \u001b[38;5;129;01min\u001b[39;00m [\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124midxmin\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124midxmax\u001b[39m\u001b[38;5;124m\"\u001b[39m]:\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\pandas\\core\\internals\\managers.py:1469\u001b[0m, in \u001b[0;36mBlockManager.grouped_reduce\u001b[1;34m(self, func)\u001b[0m\n\u001b[0;32m   1465\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m blk\u001b[38;5;241m.\u001b[39mis_object:\n\u001b[0;32m   1466\u001b[0m     \u001b[38;5;66;03m# split on object-dtype blocks bc some columns may raise\u001b[39;00m\n\u001b[0;32m   1467\u001b[0m     \u001b[38;5;66;03m#  while others do not.\u001b[39;00m\n\u001b[0;32m   1468\u001b[0m     \u001b[38;5;28;01mfor\u001b[39;00m sb \u001b[38;5;129;01min\u001b[39;00m blk\u001b[38;5;241m.\u001b[39m_split():\n\u001b[1;32m-> 1469\u001b[0m         applied \u001b[38;5;241m=\u001b[39m sb\u001b[38;5;241m.\u001b[39mapply(func)\n\u001b[0;32m   1470\u001b[0m         result_blocks \u001b[38;5;241m=\u001b[39m extend_blocks(applied, result_blocks)\n\u001b[0;32m   1471\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\pandas\\core\\internals\\blocks.py:393\u001b[0m, in \u001b[0;36mBlock.apply\u001b[1;34m(self, func, **kwargs)\u001b[0m\n\u001b[0;32m    387\u001b[0m \u001b[38;5;129m@final\u001b[39m\n\u001b[0;32m    388\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mapply\u001b[39m(\u001b[38;5;28mself\u001b[39m, func, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs) \u001b[38;5;241m-\u001b[39m\u001b[38;5;241m>\u001b[39m \u001b[38;5;28mlist\u001b[39m[Block]:\n\u001b[0;32m    389\u001b[0m \u001b[38;5;250m    \u001b[39m\u001b[38;5;124;03m\"\"\"\u001b[39;00m\n\u001b[0;32m    390\u001b[0m \u001b[38;5;124;03m    apply the function to my values; return a block if we are not\u001b[39;00m\n\u001b[0;32m    391\u001b[0m \u001b[38;5;124;03m    one\u001b[39;00m\n\u001b[0;32m    392\u001b[0m \u001b[38;5;124;03m    \"\"\"\u001b[39;00m\n\u001b[1;32m--> 393\u001b[0m     result \u001b[38;5;241m=\u001b[39m func(\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mvalues, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)\n\u001b[0;32m    395\u001b[0m     result \u001b[38;5;241m=\u001b[39m maybe_coerce_values(result)\n\u001b[0;32m    396\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_split_op_result(result)\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\pandas\\core\\groupby\\groupby.py:1995\u001b[0m, in \u001b[0;36mGroupBy._cython_agg_general.<locals>.array_func\u001b[1;34m(values)\u001b[0m\n\u001b[0;32m   1992\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m result\n\u001b[0;32m   1994\u001b[0m \u001b[38;5;28;01massert\u001b[39;00m alt \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m\n\u001b[1;32m-> 1995\u001b[0m result \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_agg_py_fallback(how, values, ndim\u001b[38;5;241m=\u001b[39mdata\u001b[38;5;241m.\u001b[39mndim, alt\u001b[38;5;241m=\u001b[39malt)\n\u001b[0;32m   1996\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m result\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\pandas\\core\\groupby\\groupby.py:1946\u001b[0m, in \u001b[0;36mGroupBy._agg_py_fallback\u001b[1;34m(self, how, values, ndim, alt)\u001b[0m\n\u001b[0;32m   1944\u001b[0m     msg \u001b[38;5;241m=\u001b[39m \u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124magg function failed [how->\u001b[39m\u001b[38;5;132;01m{\u001b[39;00mhow\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m,dtype->\u001b[39m\u001b[38;5;132;01m{\u001b[39;00mser\u001b[38;5;241m.\u001b[39mdtype\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m]\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[0;32m   1945\u001b[0m     \u001b[38;5;66;03m# preserve the kind of exception that raised\u001b[39;00m\n\u001b[1;32m-> 1946\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;28mtype\u001b[39m(err)(msg) \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01merr\u001b[39;00m\n\u001b[0;32m   1948\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m ser\u001b[38;5;241m.\u001b[39mdtype \u001b[38;5;241m==\u001b[39m \u001b[38;5;28mobject\u001b[39m:\n\u001b[0;32m   1949\u001b[0m     res_values \u001b[38;5;241m=\u001b[39m res_values\u001b[38;5;241m.\u001b[39mastype(\u001b[38;5;28mobject\u001b[39m, copy\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mFalse\u001b[39;00m)\n",
      "\u001b[1;31mTypeError\u001b[0m: agg function failed [how->mean,dtype->object]"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Load your data\n",
    "# df = pd.read_csv('your_data.csv')\n",
    "\n",
    "# Print data types to identify non-numeric columns\n",
    "print(df.dtypes)\n",
    "\n",
    "# Convert columns to numeric\n",
    "numeric_columns = ['Max TemperatureC', 'Mean TemperatureC', 'Min TemperatureC', 'Precipitationmm']\n",
    "for col in numeric_columns:\n",
    "    df[col] = pd.to_numeric(df[col], errors='coerce')\n",
    "\n",
    "# Handle missing values\n",
    "df.fillna(0, inplace=True)  # or df.dropna(subset=numeric_columns, inplace=True)\n",
    "\n",
    "# Verify data types again\n",
    "print(df.dtypes)\n",
    "\n",
    "# Group data and calculate averages\n",
    "monthly_avg = df.groupby('Month').mean()\n",
    "\n",
    "# Plot the results\n",
    "plt.figure(figsize=(12, 6))\n",
    "plt.plot(monthly_avg['Max TemperatureC'], label='Max Temperature', marker='o')\n",
    "plt.plot(monthly_avg['Mean TemperatureC'], label='Mean Temperature', marker='o')\n",
    "plt.plot(monthly_avg['Min TemperatureC'], label='Min Temperature', marker='o')\n",
    "plt.xlabel('Month')\n",
    "plt.ylabel('Temperature (°C)')\n",
    "plt.title('Monthly Average Temperatures')\n",
    "plt.legend()\n",
    "plt.grid(True)\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 123,
   "id": "9cc5b41c-8a45-45fc-b103-b9051645e9e2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Extreme heatwave events:\n",
      "            Max TemperatureC  Mean TemperatureC  Min TemperatureC  Dew PointC  \\\n",
      "CET                                                                             \n",
      "1997-07-18              37.0               27.0              17.0        13.0   \n",
      "1997-07-25              36.0               26.0              16.0        14.0   \n",
      "1997-07-26              37.0               27.0              17.0        15.0   \n",
      "1997-07-28              36.0               27.0              19.0        16.0   \n",
      "1997-07-29              36.0               27.0              18.0        17.0   \n",
      "...                      ...                ...               ...         ...   \n",
      "2015-08-06              38.0               27.0              16.0         2.0   \n",
      "2015-08-07              36.0               27.0              18.0         9.0   \n",
      "2015-08-10              37.0               27.0              17.0        11.0   \n",
      "2015-08-29              36.0               28.0              19.0        12.0   \n",
      "2015-08-30              36.0               28.0              20.0        20.0   \n",
      "\n",
      "            MeanDew PointC  Min DewpointC  Max Humidity   Mean Humidity  \\\n",
      "CET                                                                       \n",
      "1997-07-18            11.0            8.0          59.0            39.0   \n",
      "1997-07-25            13.0            9.0          77.0            45.0   \n",
      "1997-07-26            12.0            8.0          63.0            38.0   \n",
      "1997-07-28            12.0            9.0          65.0            40.0   \n",
      "1997-07-29            14.0           12.0          78.0            50.0   \n",
      "...                    ...            ...           ...             ...   \n",
      "2015-08-06             1.0           -4.0          34.0            16.0   \n",
      "2015-08-07             3.0           -4.0          30.0            17.0   \n",
      "2015-08-10             8.0            2.0          60.0            30.0   \n",
      "2015-08-29            10.0            7.0          56.0            30.0   \n",
      "2015-08-30            13.0            7.0          94.0            44.0   \n",
      "\n",
      "             Min Humidity   Max Sea Level PressurehPa  ...   Min VisibilitykM  \\\n",
      "CET                                                    ...                      \n",
      "1997-07-18           24.0                        1020  ...               10.0   \n",
      "1997-07-25           25.0                        1024  ...               10.0   \n",
      "1997-07-26           24.0                        1023  ...               10.0   \n",
      "1997-07-28           26.0                        1020  ...                7.0   \n",
      "1997-07-29           27.0                        1022  ...               10.0   \n",
      "...                   ...                         ...  ...                ...   \n",
      "2015-08-06            4.0                        1017  ...               10.0   \n",
      "2015-08-07            6.0                        1017  ...               10.0   \n",
      "2015-08-10            9.0                        1020  ...               23.0   \n",
      "2015-08-29           12.0                        1020  ...               21.0   \n",
      "2015-08-30           16.0                        1019  ...                2.0   \n",
      "\n",
      "             Max Wind SpeedKm/h   Mean Wind SpeedKm/h   Max Gust SpeedKm/h  \\\n",
      "CET                                                                          \n",
      "1997-07-18                   21                    11                  0.0   \n",
      "1997-07-25                   13                     3                  0.0   \n",
      "1997-07-26                   10                     3                  0.0   \n",
      "1997-07-28                   23                     6                  0.0   \n",
      "1997-07-29                   37                    11                 40.0   \n",
      "...                         ...                   ...                  ...   \n",
      "2015-08-06                   29                    10                 55.0   \n",
      "2015-08-07                   32                    11                 53.0   \n",
      "2015-08-10                   19                     8                 47.0   \n",
      "2015-08-29                   24                    10                 35.0   \n",
      "2015-08-30                   58                    14                 87.0   \n",
      "\n",
      "            Precipitationmm   CloudCover             Events  WindDirDegrees  \\\n",
      "CET                                                                           \n",
      "1997-07-18             0.00          2.0                  0              27   \n",
      "1997-07-25             0.00          1.0                  0              19   \n",
      "1997-07-26             0.00          2.0                  0              21   \n",
      "1997-07-28             0.00          4.0  Rain-Thunderstorm              91   \n",
      "1997-07-29             0.00          5.0       Thunderstorm              63   \n",
      "...                     ...          ...                ...             ...   \n",
      "2015-08-06             0.00          1.0                  0             273   \n",
      "2015-08-07             0.00          1.0                  0             185   \n",
      "2015-08-10             0.00          0.0                  0             309   \n",
      "2015-08-29             0.00          0.0                  0             134   \n",
      "2015-08-30             8.89          3.0  Rain-Thunderstorm             135   \n",
      "\n",
      "            Month  Year  \n",
      "CET                      \n",
      "1997-07-18      7  1997  \n",
      "1997-07-25      7  1997  \n",
      "1997-07-26      7  1997  \n",
      "1997-07-28      7  1997  \n",
      "1997-07-29      7  1997  \n",
      "...           ...   ...  \n",
      "2015-08-06      8  2015  \n",
      "2015-08-07      8  2015  \n",
      "2015-08-10      8  2015  \n",
      "2015-08-29      8  2015  \n",
      "2015-08-30      8  2015  \n",
      "\n",
      "[321 rows x 24 columns]\n"
     ]
    }
   ],
   "source": [
    "heatwave_threshold = df['Max TemperatureC'].quantile(0.95)\n",
    "extreme_heatwaves = df[df['Max TemperatureC'] > heatwave_threshold]\n",
    "print(\"Extreme heatwave events:\")\n",
    "print(extreme_heatwaves)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 132,
   "id": "b40a0204-2cee-459c-be55-b5c8e352e2b7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Anomalies detected:\n",
      "            Max TemperatureC  Mean TemperatureC  Min TemperatureC  Dew PointC  \\\n",
      "CET                                                                             \n",
      "1997-01-03               5.0                3.0               2.0         5.0   \n",
      "1997-01-05               2.0                0.0              -1.0         2.0   \n",
      "1997-01-07               2.0                0.0              -2.0         1.0   \n",
      "1997-01-18               6.0                3.0               2.0         6.0   \n",
      "1997-03-11              22.0               11.0               1.0         6.0   \n",
      "...                      ...                ...               ...         ...   \n",
      "2015-10-26              18.0               16.0              13.0        14.0   \n",
      "2015-11-02              15.0               13.0              11.0        12.0   \n",
      "2015-12-01              17.0                7.0              -4.0        -2.0   \n",
      "2015-12-28              15.0                8.0               2.0         8.0   \n",
      "2015-12-29              11.0                8.0               5.0         9.0   \n",
      "\n",
      "            MeanDew PointC  Min DewpointC  Max Humidity   Mean Humidity  \\\n",
      "CET                                                                       \n",
      "1997-01-03             1.0           -1.0         100.0            85.0   \n",
      "1997-01-05             0.0           -3.0         100.0            95.0   \n",
      "1997-01-07            -1.0           -3.0         100.0            93.0   \n",
      "1997-01-18             4.0            2.0         100.0            98.0   \n",
      "1997-03-11             2.0            0.0          93.0            57.0   \n",
      "...                    ...            ...           ...             ...   \n",
      "2015-10-26            12.0           11.0         100.0            79.0   \n",
      "2015-11-02             9.0            8.0          95.0            80.0   \n",
      "2015-12-01            -4.0           -6.0          86.0            54.0   \n",
      "2015-12-28             4.0            1.0         100.0            78.0   \n",
      "2015-12-29             7.0            5.0         100.0            89.0   \n",
      "\n",
      "             Min Humidity   Max Sea Level PressurehPa  ...  \\\n",
      "CET                                                    ...   \n",
      "1997-01-03           70.0                        1005  ...   \n",
      "1997-01-05           86.0                        1012  ...   \n",
      "1997-01-07           75.0                        1016  ...   \n",
      "1997-01-18           93.0                        1022  ...   \n",
      "1997-03-11           28.0                        1030  ...   \n",
      "...                   ...                         ...  ...   \n",
      "2015-10-26           52.0                        1018  ...   \n",
      "2015-11-02           54.0                        1017  ...   \n",
      "2015-12-01           13.0                        1037  ...   \n",
      "2015-12-28           34.0                        1031  ...   \n",
      "2015-12-29           66.0                        1034  ...   \n",
      "\n",
      "             Max Wind SpeedKm/h   Mean Wind SpeedKm/h   Max Gust SpeedKm/h  \\\n",
      "CET                                                                          \n",
      "1997-01-03                   27                    19                  0.0   \n",
      "1997-01-05                   14                     6                  0.0   \n",
      "1997-01-07                    6                     2                  0.0   \n",
      "1997-01-18                    8                     2                  0.0   \n",
      "1997-03-11                    8                     3                  0.0   \n",
      "...                         ...                   ...                  ...   \n",
      "2015-10-26                   19                     6                 39.0   \n",
      "2015-11-02                   27                    11                 48.0   \n",
      "2015-12-01                   10                     5                 27.0   \n",
      "2015-12-28                   27                     8                 45.0   \n",
      "2015-12-29                   14                     8                 32.0   \n",
      "\n",
      "            Precipitationmm   CloudCover     Events  WindDirDegrees  Month  \\\n",
      "CET                                                                          \n",
      "1997-01-03             0.00          6.0  Rain-Snow             256      1   \n",
      "1997-01-05             0.00          7.0       Snow               2      1   \n",
      "1997-01-07             0.00          7.0       Snow              43      1   \n",
      "1997-01-18             0.00          6.0       Rain             357      1   \n",
      "1997-03-11             0.00          0.0          0             336      3   \n",
      "...                     ...          ...        ...             ...    ...   \n",
      "2015-10-26             0.51          5.0       Rain             141     10   \n",
      "2015-11-02            11.94          6.0       Rain             132     11   \n",
      "2015-12-01             0.00          0.0          0             343     12   \n",
      "2015-12-28             0.51          7.0       Rain             243     12   \n",
      "2015-12-29             2.03          5.0   Fog-Rain             190     12   \n",
      "\n",
      "            Year  anomaly  \n",
      "CET                        \n",
      "1997-01-03  1997       -1  \n",
      "1997-01-05  1997       -1  \n",
      "1997-01-07  1997       -1  \n",
      "1997-01-18  1997       -1  \n",
      "1997-03-11  1997       -1  \n",
      "...          ...      ...  \n",
      "2015-10-26  2015       -1  \n",
      "2015-11-02  2015       -1  \n",
      "2015-12-01  2015       -1  \n",
      "2015-12-28  2015       -1  \n",
      "2015-12-29  2015       -1  \n",
      "\n",
      "[881 rows x 25 columns]\n"
     ]
    }
   ],
   "source": [
    "from sklearn.ensemble import IsolationForest\n",
    "\n",
    "model = IsolationForest()\n",
    "df['anomaly'] = model.fit_predict(df[numeric_columns])\n",
    "anomalies = df[df['anomaly'] == -1]\n",
    "print(\"Anomalies detected:\")\n",
    "print(anomalies)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "97f64511-febd-411a-bc04-8eaa51792d2c",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9f297f66-8867-47ed-a609-edf0f871c25b",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
5. Results
5.1 Percentage of Days with Precipitation
X% of the days had some form of precipitation during the analyzed period.
5.2 Percentage of Clear Days
Y% of the days were clear, i.e., with no cloud cover.
5.3 Optimal Travel Month
The warmest month to visit Madrid is Month X, with an average temperature of Y°C.
5.4 Fastest Wind Gust Record
The fastest wind gust occurred on Date, with a speed of Z km/h. On this day, the weather conditions included a temperature of A°C, humidity of B%, and C mm of precipitation.
5.5 Visibility Comparison
Average visibility on clear days was D km, compared to E km on foggy days.
6. Conclusions
The analysis provides insights into the frequency and impact of precipitation and clear days, aiding in the planning of activities and travel.
Month X is recommended for visitors seeking warm weather in Madrid.
Extreme weather conditions, such as the fastest wind gust, are significant for understanding Madrid’s weather anomalies.
Visibility data highlights the difference in conditions between clear and foggy days, which is valuable for various applications.